import{combine as e,createStore as r,createEvent as t,sample as n,guard as o}from"effector";import{useStore as i}from"effector-react";const s={store:function({init:e,domain:t,existing:n}){return n||(t?t.store(e):r(e))},event:function({domain:e,existing:r}){return r||(e?e.event():t())}};function a(e,r,t){const n="function"==typeof r.init?r.init():r.init,o=s.store({domain:t,existing:r.units?.$value,init:n}),i=s.store({domain:t,existing:r.units?.$errors,init:[]}),a=i.map(e=>e[0]?e[0]:null),u=o.map(e=>e!==n),l=s.store({domain:t,existing:r.units?.$isTouched,init:!1}),d=s.event({domain:t,existing:r.units?.onChange}),c=s.event({domain:t,existing:r.units?.onBlur}),f=s.event({domain:t,existing:r.units?.changed}),m=s.event({domain:t,existing:r.units?.addError}),h=s.event({domain:t,existing:r.units?.validate}),v=s.event({domain:t,existing:r.units?.resetErrors}),$=s.event({domain:t,existing:r.units?.reset});return{changed:f,name:e,$value:o,$errors:i,$firstError:a,$isValid:a.map(e=>null===e),$isDirty:u,$isTouched:l,$touched:l,onChange:d,onBlur:c,addError:m,validate:h,set:d,reset:$,resetErrors:v,filter:r.filter}}function u({$form:r,submitEvent:t,resetFormEvent:o,field:i,rules:s,formValidationEvents:a,fieldValidationEvents:u}){const{$value:l,$errors:d,onBlur:c,changed:f,addError:m,validate:h,resetErrors:v,reset:$}=i,g=function(e){return(r,t)=>{const n=[];for(const o of e){const e=o.validator(r,t);"boolean"!=typeof e||e||n.push({rule:o.name,errorText:o.errorText,value:r}),"object"!=typeof e||e.isValid||n.push({rule:o.name,errorText:e.errorText,value:r})}return n}}(s),E=[...a,...u],x=[];E.includes("submit")&&x.push(n({source:e({fieldValue:l,form:r}),clock:t})),E.includes("blur")&&x.push(n({source:e({fieldValue:l,form:r}),clock:c})),E.includes("change")&&x.push(n({source:e({fieldValue:l,form:r}),clock:f})),x.push(n({source:e({fieldValue:l,form:r}),clock:h}));const p=n({source:l,clock:m,fn:(e,{rule:r,errorText:t})=>({rule:r,value:e,errorText:t})});d.on(x,(e,{form:r,fieldValue:t})=>g(t,r)).on(p,(e,r)=>[r,...e]).reset(v,o,$),E.includes("change")||d.reset(f)}function l({$value:e,$touched:r,onChange:t,changed:n,name:i,reset:s,filter:a},u,l,d){r.on(n,()=>!0).reset(s,l,d),o({source:t,filter:a||(()=>!0),target:n}),e.on(n,(e,r)=>r).on(u,(e,r)=>r.hasOwnProperty(i)?r[i]:e).reset(s,l)}function d(r){const{filter:t,domain:i,fields:d,validateOn:c,units:f}=r,m={},h=[],v=[];for(const e in d){if(!d.hasOwnProperty(e))continue;const r=a(e,d[e],i);m[e]=r,h.push(r.$isDirty),v.push(r.$touched)}const $=function(r){const t={};for(const e in r)r.hasOwnProperty(e)&&(t[e]=r[e].$value);return e(t)}(m),g=function(r){const t=[];for(const e in r){if(!r.hasOwnProperty(e))continue;const{$firstError:n}=r[e];t.push(n)}return e(t).map(e=>e.every(e=>null===e))}(m),E=t?e(g,t,(e,r)=>e&&r):g,x=e(h).map(e=>e.some(Boolean)),p=e(v).map(e=>e.some(Boolean)),V=s.event({domain:i,existing:f?.submit}),y=s.event({domain:i,existing:f?.formValidated}),T=s.event({domain:i,existing:f?.setForm}),b=s.event({domain:i,existing:f?.reset}),O=s.event({domain:i,existing:f?.resetTouched}),B=n($,V);for(const e in m){if(!m.hasOwnProperty(e))continue;const r=d[e],t=m[e];l(t,T,b,O),r.rules&&u({$form:$,rules:r.rules,submitEvent:V,resetFormEvent:b,field:t,formValidationEvents:c||["submit"],fieldValidationEvents:r.validateOn?r.validateOn:[]})}return o({source:B,filter:E,target:y}),{fields:m,$values:$,$eachValid:g,$isValid:g,$isDirty:x,$touched:p,submit:V,resetTouched:O,reset:b,setForm:T,set:T,formValidated:y}}function c(e){const r=i(e.$value),t=i(e.$errors),n=i(e.$firstError),o=i(e.$isValid),s=i(e.$isDirty),a=i(e.$touched);return{name:e.name,value:r,errors:t,firstError:n,isValid:o,isDirty:s,touched:a,isTouched:a,onChange:e.onChange,onBlur:e.onBlur,addError:e.addError,validate:e.validate,reset:e.reset,set:e.onChange,resetErrors:e.resetErrors,hasError:()=>null!==n,errorText:e=>n?e&&e[n.rule]?e[n.rule]:n.errorText||"":""}}function f(e){const r={};for(const t in e.fields){if(!e.fields.hasOwnProperty(t))continue;const n=e.fields[t];r[t]=c(n)}const t=i(e.$values),n=i(e.$eachValid),o=i(e.$isDirty),s=i(e.$touched);return{fields:r,values:t,hasError:e=>e?!!r[e]&&Boolean(r[e].firstError):!n,eachValid:n,isValid:n,isDirty:o,isTouched:s,touched:s,errors:e=>r[e]?r[e].errors:[],error:e=>r[e]?r[e].firstError:null,reset:e.reset,errorText:(e,t)=>{const n=r[e];return n&&n.firstError?t&&t[n.firstError.rule]?t[n.firstError.rule]:n.firstError.errorText||"":""},submit:e.submit,setForm:e.setForm,set:e.setForm,formValidated:e.formValidated}}export{d as createForm,c as useField,f as useForm};
//# sourceMappingURL=index.js.map
