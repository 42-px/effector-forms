{"version":3,"file":"effector-forms.iife.js","sources":["../src/validation.ts","../src/create-form-unit.ts","../src/field.ts","../src/scope.ts","../src/factory.ts","../src/react-hooks.ts"],"sourcesContent":["import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n    RuleResolver,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rulesOrResolver: Rule<Value, Form, any>[] | RuleResolver<Value, Form>\n) {\n    return (\n        value: Value,\n        form: Form,\n        rulesSources?: any[]\n    ): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n        const rules = typeof rulesOrResolver === \"function\"\n            ? rulesOrResolver(value, form)\n            : rulesOrResolver\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { createStore, createEvent, Domain, Store, Event } from \"effector\"\n\ntype CreateStoreParams<Value> = {\n  init: Value\n  domain?: Domain\n  existing?: Store<Value>\n}\n\nfunction store<Value>(\n    { init, domain, existing }: CreateStoreParams<Value>,\n    effectorData?: any\n) {\n    if (existing) {\n        return existing\n    }\n    return domain\n        ? domain.store(init, effectorData)\n        : createStore(init, effectorData)\n}\n\ntype CreateEventParams<Value> = {\n  domain?: Domain\n  existing?: Event<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.event<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    merge,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldData,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n    RuleResolver,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n    effectorData?: any,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    }, effectorData)\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    }, effectorData)\n\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $isDirty = $value.map((value) => value !== initValue)\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    }, effectorData)\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string\n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    const $isValid = $firstError.map((firstError) => firstError === null)\n\n    const $field = combine({\n        value: $value,\n        errors: $errors,\n        firstError: $firstError,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        isTouched: $touched,\n    })\n\n    return {\n        changed,\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        $isValid,\n        $isDirty,\n        $isTouched: $touched,\n        $touched,\n        $field: $field as Store<FieldData<any>>,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        set: onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        filter: fieldConfig.filter,\n    }\n}\n\ntype BindValidationParams = {\n    $form: Store<AnyFormValues>\n    validateFormEvent: Event<void>\n    submitEvent: Event<void>\n    resetFormEvent: Event<void>\n    resetValues: Event<void>\n    resetErrors: Event<void>\n    field: Field<any>\n    rules: Rule<any, any>[] | RuleResolver<any, any>\n    formValidationEvents: ValidationEvent[]\n    fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    validateFormEvent,\n    submitEvent,\n    resetFormEvent,\n    resetValues,\n    field,\n    rules,\n    resetErrors: resetErrorsFormEvent,\n    formValidationEvents,\n    fieldValidationEvents,\n}: BindValidationParams,\neffectorData?: any): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = typeof rules === \"function\"\n        ? createStore<any[]>([], effectorData)\n        : combine(\n            rules.map(({ source }) => source || createStore(null, effectorData))\n        )\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        const validationTrigger = sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: submitEvent,\n        })\n\n        validationEvents.push(validationTrigger)\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validateFormEvent,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),\n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(\n                fieldValue,\n                form,\n                rulesSources,\n            )\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors, resetFormEvent, reset, resetErrorsFormEvent)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\nexport function bindChangeEvent(\n    {\n        $value,\n        $touched,\n        onChange,\n        changed,\n        name,\n        reset,\n        resetValue,\n        filter }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n    resetForm: Event<void>,\n    resetTouched: Event<void>,\n    resetValues: Event<void>,\n): void {\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name)\n                ? updateSet[name]\n                : curr\n        )\n        .reset(reset, resetValue, resetValues, resetForm)\n\n}\n","import { Event } from \"effector\"\nimport { useEvent } from \"effector-react\"\n\nexport function isScope() {\n    return process.env.IS_SCOPE_BUILD === \"true\"\n}\n\nexport function isLegacySSRBuild() {\n    return process.env.IS_LEGACY_SSR_BUILD === \"true\"\n}\n\nexport function wrapEvent<P>(event: Event<P>) {\n    return isScope() ? useEvent(event) : event\n}\n\n\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n} from \"effector\"\nimport {\n    AnyFields,\n    AnyFormValues,\n    FormConfig,\n    Form,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\nimport { isScope, isLegacySSRBuild } from \"./scope\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\nexport function createForm<Values extends AnyFormValues>(\n    config: FormConfig<Values>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    if (isScope() && isLegacySSRBuild() && !domain) {\n        throw new Error(\"domain option is required in ssr mode!\")\n    }\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        const field = createField(fieldName, fieldConfig, domain, {\n            sid: fieldName\n        })\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const $meta = combine({\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n    })\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n\n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n\n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as Event<Partial<AnyFormValues>>,\n    })\n\n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: units?.resetErrors,\n    })\n\n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n\n    const submitWithFormData = sample({\n        source: $form,\n        clock: submitForm,\n    })\n    const validateWithFormData = sample({\n        source: $form,\n        clock: validate\n    })\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm, resetForm, resetTouched, resetValues)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            resetFormEvent: resetForm,\n            resetValues,\n            resetErrors,\n            validateFormEvent: validate,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn\n                : [],\n        }, { sid: fieldName })\n    }\n\n    guard({\n        source: submitWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        // TODO: fix\n        target: formValidated,\n    })\n\n    guard({\n        source: validateWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        $isValid: $eachValid,\n        $isDirty: $isDirty,\n        $touched: $touched,\n        $meta,\n        submit: submitForm,\n        validate,\n        resetTouched,\n        reset: resetForm,\n        resetValues,\n        resetErrors,\n        setForm,\n        set: setForm,\n        formValidated,\n    } as unknown as Form<Values>\n}\n","import { useStore } from \"effector-react\"\nimport {\n    Field,\n    ValidationError,\n    AnyFormValues,\n    Form\n} from \"./types\"\nimport { wrapEvent } from \"./scope\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype AddErrorPayload = { rule: string; errorText?: string }\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  hasError: () => boolean\n  onChange: (v: Value) => Value\n  onBlur: (v: void) => void\n  errorText: (map?: ErrorTextMap) => string\n  addError: (p: AddErrorPayload) => AddErrorPayload\n  validate: (v: void) => void\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  reset: (v: void) => void\n  set: (v: Value) => Value\n  resetErrors: (v: void) => void\n}\n\ntype ConnectedFields<Values extends AnyFormValues> = {\n  [K in keyof Values]: ConnectedField<Values[K]>\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const {\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        isTouched: touched,\n    } = useStore(field.$field)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: wrapEvent(field.onChange),\n        onBlur: wrapEvent(field.onBlur),\n        addError: wrapEvent(field.addError),\n        validate: wrapEvent(field.validate),\n        reset: wrapEvent(field.reset),\n        set: wrapEvent(field.onChange),\n        resetErrors: wrapEvent(field.resetErrors),\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Values extends AnyFormValues> = {\n  fields: ConnectedFields<Values>\n  values: Values\n  hasError: (fieldName?: keyof Values) => boolean\n  eachValid: boolean\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  errors: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>[]\n  )\n  error: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>\n  ) | null\n  errorText: (fieldName: keyof Values, map?: ErrorTextMap) => string\n  submit: (p: void) => void\n  reset: (p: void) => void\n  setForm: (p: Partial<Values>) => Partial<Values>\n  set: (p: Partial<Values>) => Partial<Values>\n  formValidated: (p: Values) => Values\n}\n\nexport function useForm<Values extends AnyFormValues>(\n    form: Form<Values>\n): Result<Values> {\n    const connectedFields = {} as AnyConnectedFields\n    const values = {} as AnyFormValues\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue\n        const field = form.fields[fieldName]\n        const connectedField = useField(field)\n        connectedFields[fieldName] = connectedField\n        values[fieldName] = connectedField.value\n    }\n\n    const {\n        isValid: eachValid,\n        isDirty,\n        touched,\n    } = useStore(form.$meta)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Values>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        errorText,\n        reset: wrapEvent(form.reset),\n        submit: wrapEvent(form.submit),\n        setForm: wrapEvent(form.setForm),\n        set: wrapEvent(form.setForm), // set form alias\n        formValidated: wrapEvent(form.formValidated),\n    } as Result<Values>\n}\n"],"names":["createCombineValidator","rulesOrResolver","value","form","rulesSources","errors","rules","i","length","rule","source","result","validator","push","name","errorText","isValid","eachValid","fields","firstErrors","fieldName","hasOwnProperty","$firstError","$firstErrors","combine","map","every","error","store","init","domain","existing","effectorData","createStore","event","createEvent","createFormUnit","createField","fieldConfig","initValue","$value","units","$errors","$isDirty","$touched","$isTouched","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$field","isDirty","isTouched","set","filter","bindValidation","$form","validateFormEvent","submitEvent","resetFormEvent","resetValues","field","resetErrorsFormEvent","formValidationEvents","fieldValidationEvents","eventsNames","validationEvents","includes","validationTrigger","sample","fieldValue","clock","merge","addErrorWithValue","fn","on","_","newError","bindChangeEvent","setForm","resetForm","resetTouched","guard","target","curr","updateSet","wrapEvent","createFormValuesStore","shape","createForm","config","$filter","fieldsConfigs","validateOn","dirtyFlagsArr","touchedFlagsArr","_withFactory","sid","$eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","touched","submitForm","submit","formValidated","submitWithFormData","validateWithFormData","$values","useField","useStore","hasError","useForm","connectedFields","values","connectedField"],"mappings":"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"}