{"version":3,"file":"effector-forms.iife.js","sources":["../src/create-form-unit.ts","../src/field.ts","../src/validation.ts","../src/react-hooks.ts","../src/factory.ts"],"sourcesContent":["import { createStore, createEvent, Domain, Store, Event } from \"effector\"\n\ntype CreateStoreParams<Value> = {\n    init: Value\n    domain?: Domain\n    existing?: Store<Value>\n}\n\nfunction store<Value>(\n    { init, domain, existing }: CreateStoreParams<Value>,\n    effectorData?: any\n) {\n    if (existing) {\n        return existing\n    }\n    return domain\n        ? domain.store(init, effectorData)\n        : createStore(init, effectorData)\n}\n\ntype CreateEventParams<Value> = {\n    domain?: Domain\n    existing?: Event<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.event<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    merge,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldData,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    AddErrorPayload,\n    FieldUnitShape,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    }, {\n        sid: `${fieldName}-$value`\n    })\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    }, {\n        sid: `${fieldName}-$errors`\n    })\n\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $initValue = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$initValue,\n        init: initValue,\n    }, {\n        sid: `${fieldName}-$initValue`\n    })\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    }, {\n        sid: `${fieldName}-$touched`\n    })\n\n    const $isDirty = combine($value, $initValue,\n        (value, initValue) => value !== initValue,\n    )\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string\n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    const $isValid = $firstError.map((firstError) => firstError === null)\n    const $errorText = $firstError.map(\n        (firstError) => firstError?.errorText || \"\"\n    )\n\n    const $field = combine({\n        value: $value,\n        errors: $errors,\n        firstError: $firstError,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        isTouched: $touched,\n    })\n\n    const unitShape: FieldUnitShape<any> = {\n        value: $value,\n        initValue: $initValue,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        touched: $touched,\n        errors: $errors,\n        firstError: $firstError,\n        errorText: $errorText,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        reset,\n        resetErrors,\n        resetValue,\n    }\n\n    return {\n        changed,\n        \"name\": fieldName,\n        $initValue,\n        $value,\n        $errors,\n        $firstError,\n        $errorText,\n        $isValid,\n        $isDirty,\n        \"$isTouched\": $touched,\n        $touched,\n        \"$field\": $field as Store<FieldData<any>>,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        \"set\": onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        \"filter\": fieldConfig.filter,\n        \"@@unitShape\": () => unitShape,\n    }\n}\n\ntype BindValidationParams = {\n    form: {\n        $values: Store<AnyFormValues>\n        submit: Event<void>\n        reset: Event<void>\n        resetValues: Event<void>\n        resetErrors: Event<void>\n        addErrors: Event<AddErrorPayload[]>\n        validate: Event<void>\n        validateOn?: ValidationEvent[]\n    }\n    field: Field<any>\n    fieldConfig: FieldConfig<any>\n}\n\nexport function bindValidation(\n    params: BindValidationParams, effectorData?: any\n): void {\n    const { form, field, fieldConfig } = params\n    const rules = fieldConfig.rules || []\n    const formValidationEvents = form.validateOn || [\"submit\"]\n    const fieldValidationEvents = fieldConfig.validateOn || []\n\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = typeof rules === \"function\"\n        ? createStore<any[]>([], { sid: `${field.name}-$rulesSources` })\n        : combine(\n            rules.map(({ source }, i) => {\n                const sid = `${field.name}-$rulesSources-${i}`\n                return source || createStore(null, { sid })\n            })\n        )\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        const validationTrigger = sample({\n            source: combine({\n                fieldValue: $value,\n                form: form.$values,\n                rulesSources,\n            }),\n            clock: form.submit,\n        })\n\n        validationEvents.push(validationTrigger)\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: form.$values,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: form.$values,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, form.resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: form.$values,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: form.$values,\n            rulesSources,\n        }),\n        clock: form.validate,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),\n    })\n\n    const addErrorsWithValue = sample({\n        source: $value,\n        clock: form.addErrors,\n        fn: (value, errors) => ({\n            value,\n            newErrors: errors,\n        })\n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(\n                fieldValue,\n                form,\n                rulesSources,\n            )\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .on(addErrorsWithValue, (currErrors, { value, newErrors }) => {\n            const matchedErrors: ValidationError[] = []\n\n            for (const newError of newErrors) {\n                if (newError.field !== field.name) continue\n                matchedErrors.push({\n                    value,\n                    rule: newError.rule,\n                    errorText: newError.errorText,\n                })\n            }\n\n            return [...matchedErrors, ...currErrors]\n        })\n        .reset(resetErrors, form.reset, reset, form.resetErrors)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\ntype BindChangeEventParams = {\n    field: Field<any>\n    form: {\n        setForm: Event<Partial<AnyFormValues>>\n        setInitialForm: Event<Partial<AnyFormValues>>\n        resetForm: Event<void>\n        resetTouched: Event<void>\n        resetValues: Event<void>\n    }\n}\n\nexport function bindChangeEvent({\n    field,\n    form,\n}: BindChangeEventParams): void {\n    const {\n        $value,\n        $initValue,\n        $touched,\n        onChange,\n        changed,\n        name,\n        reset,\n        resetValue,\n        filter\n    } = field\n\n    const {\n        setForm,\n        setInitialForm,\n        resetForm,\n        resetTouched,\n        resetValues\n    } = form\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $initValue\n        .on(setInitialForm, (curr, updateSet) => updateSet.hasOwnProperty(name)\n            ? updateSet[name]\n            : curr\n        )\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            [setForm, setInitialForm],\n            (curr, updateSet) => updateSet.hasOwnProperty(name)\n                ? updateSet[name]\n                : curr\n        )\n        .reset(reset, resetValue, resetValues, resetForm)\n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n    RuleResolver,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rulesOrResolver: Rule<Value, Form, any>[] | RuleResolver<Value, Form>\n) {\n    return (\n        value: Value,\n        form: Form,\n        rulesSources?: any[]\n    ): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n        const rules = typeof rulesOrResolver === \"function\"\n            ? rulesOrResolver(value, form)\n            : rulesOrResolver\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n\n    const $firstErrors = combine(firstErrors)\n\n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { useUnit } from \"effector-react\"\nimport {\n    Field,\n    ValidationError,\n    AnyFormValues,\n    Form\n} from \"./types\"\n\ntype ErrorTextMap = {\n    [key: string]: string\n}\n\ntype AddErrorPayload = { rule: string; errorText?: string }\n\ntype ConnectedField<Value> = {\n    name: string\n    value: Value\n    errors: ValidationError<Value>[]\n    firstError: ValidationError<Value> | null\n    hasError: () => boolean\n    onChange: (v: Value) => Value\n    onBlur: (v: void) => void\n    errorText: (map?: ErrorTextMap) => string\n    addError: (p: AddErrorPayload) => AddErrorPayload\n    validate: (v: void) => void\n    isValid: boolean\n    isDirty: boolean\n    isTouched: boolean\n    touched: boolean\n    reset: (v: void) => void\n    set: (v: Value) => Value\n    resetErrors: (v: void) => void\n}\n\ntype ConnectedFields<Values extends AnyFormValues> = {\n    [K in keyof Values]: ConnectedField<Values[K]>\n}\n\ntype AnyConnectedFields = {\n    [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const {\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        isTouched: touched,\n    } = useUnit(field.$field)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: useUnit(field.onChange),\n        onBlur: useUnit(field.onBlur),\n        addError: useUnit(field.addError),\n        validate: useUnit(field.validate),\n        reset: useUnit(field.reset),\n        set: useUnit(field.onChange),\n        resetErrors: useUnit(field.resetErrors),\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Values extends AnyFormValues> = {\n    fields: ConnectedFields<Values>\n    values: Values\n    hasError: (fieldName?: keyof Values) => boolean\n    eachValid: boolean\n    isValid: boolean\n    isDirty: boolean\n    isTouched: boolean\n    touched: boolean\n    errors: (fieldName: keyof Values) => (\n        ValidationError<Values[typeof fieldName]>[]\n    )\n    error: (fieldName: keyof Values) => (\n        ValidationError<Values[typeof fieldName]>\n    ) | null\n    errorText: (fieldName: keyof Values, map?: ErrorTextMap) => string\n    submit: (p: void) => void\n    reset: (p: void) => void\n    setForm: (p: Partial<Values>) => Partial<Values>\n    set: (p: Partial<Values>) => Partial<Values>\n    formValidated: (p: Values) => Values\n}\n\nexport function useForm<Values extends AnyFormValues>(\n    form: Form<Values>\n): Result<Values> {\n    const connectedFields = {} as AnyConnectedFields\n    const values = {} as AnyFormValues\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue\n        const field = form.fields[fieldName]\n        const connectedField = useField(field)\n        connectedFields[fieldName] = connectedField\n        values[fieldName] = connectedField.value\n    }\n\n    const {\n        isValid: eachValid,\n        isDirty,\n        touched,\n    } = useUnit(form.$meta)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Values>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        errorText,\n        reset: useUnit(form.reset),\n        submit: useUnit(form.submit),\n        setForm: useUnit(form.setForm),\n        set: useUnit(form.setForm), // set form alias\n        formValidated: useUnit(form.formValidated),\n    } as Result<Values>\n}\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    createStore,\n} from \"effector\"\nimport {\n    AnyFields,\n    AnyFormValues,\n    FormConfig,\n    Form,\n    AddErrorPayload,\n    FormUnitShape,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\nexport function createForm<Values extends AnyFormValues>(\n    config: FormConfig<Values>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = createField(fieldName, fieldConfig, domain)\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const $meta = combine({\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n    })\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n\n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n\n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n    const setInitialForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setInitialForm as Event<Partial<AnyFormValues>>,\n    })\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as Event<Partial<AnyFormValues>>,\n    })\n\n    const addErrors = createFormUnit.event<AddErrorPayload[]>({\n        domain,\n        existing: units?.addErrors,\n    })\n\n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: units?.resetErrors,\n    })\n\n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n\n    const submitWithFormData = sample({\n        source: $form,\n        clock: submitForm,\n    })\n    const validateWithFormData = sample({\n        source: $form,\n        clock: validate\n    })\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent({\n            form: {\n                setForm,\n                setInitialForm,\n                resetForm,\n                resetTouched,\n                resetValues\n            },\n            field,\n        })\n        bindValidation({\n            form: {\n                $values: $form,\n                submit: submitForm,\n                reset: resetForm,\n                addErrors,\n                resetValues,\n                resetErrors,\n                validate,\n                validateOn,\n            },\n            fieldConfig,\n            field,\n        }, { sid: fieldName })\n    }\n\n    guard({\n        source: submitWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        // TODO: fix\n        target: formValidated,\n    })\n\n    guard({\n        source: validateWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    const unitShape: FormUnitShape<any> = {\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n        submit: submitForm,\n        reset: resetForm,\n        addErrors: addErrors,\n        validate,\n        setForm,\n        setInitialForm,\n        resetTouched,\n        resetValues,\n        resetErrors,\n        formValidated,\n    }\n\n    return {\n        fields,\n        \"$values\": $form,\n        $eachValid,\n        \"$isValid\": $eachValid,\n        \"$isDirty\": $isDirty,\n        \"$touched\": $touched,\n        $meta,\n        \"submit\": submitForm,\n        validate,\n        resetTouched,\n        addErrors,\n        \"reset\": resetForm,\n        resetValues,\n        resetErrors,\n        setForm,\n        setInitialForm,\n        \"set\": setForm,\n        formValidated,\n        \"@@unitShape\": () => unitShape,\n    } as unknown as Form<Values>\n}\n"],"names":["createFormUnit","store","init","domain","existing","effectorData","and","sid","createStore","event","createEvent","createField","fieldName","fieldConfig","_fieldConfig$units","_fieldConfig$units2","_fieldConfig$units3","_fieldConfig$units4","_fieldConfig$units5","_fieldConfig$units6","_fieldConfig$units7","_fieldConfig$units8","_fieldConfig$units9","_fieldConfig$units10","_fieldConfig$units11","_fieldConfig$units12","initValue","$value","units","name","$errors","$firstError","map","errors","$initValue","$touched","$isTouched","$isDirty","combine","value","or","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$errorText","errorText","$field","isValid","isDirty","isTouched","unitShape","touched","set","filter","bindValidation","params","form","field","rules","formValidationEvents","validateOn","fieldValidationEvents","rulesSources","source","i","validator","rulesOrResolver","length","rule","result","push","eventsNames","validationEvents","includes","validationTrigger","sample","fieldValue","$values","clock","submit","merge","resetValues","addErrorWithValue","fn","addErrorsWithValue","addErrors","newErrors","on","_","newError","currErrors","matchedErrors","bindChangeEvent","setForm","setInitialForm","resetForm","resetTouched","guard","target","curr","updateSet","hasOwnProperty","useField","useUnit","hasError","config","$filter","fields","fieldsConfigs","dirtyFlagsArr","touchedFlagsArr","$form","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","submitForm","formValidated","submitWithFormData","validateWithFormData","connectedFields","values","connectedField"],"mappings":"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"}