{"version":3,"file":"effector-forms.cjs.js","sources":["../src/field.ts","../src/validation.ts","../src/react-hooks.ts","../src/factory.ts"],"sourcesContent":["import {\n    Domain,\n    Event,\n    Store,\n    createStore,\n    createEvent,\n    combine, \n    sample,\n    guard,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = domain ? domain.store(initValue) : createStore(initValue)\n\n    const $errors = domain\n        ? domain.store<ValidationError[]>([])\n        : createStore<ValidationError[]>([])\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $isDirty = $value.map((value) => value !== initValue)\n\n    const $touched = domain ? domain.store(false) : createStore(false)\n\n    const onChange = domain ? domain.event() : createEvent()\n    const onBlur = domain ? domain.event() : createEvent()\n    const changed = domain ? domain.event() : createEvent()\n    const addError = domain\n        ? domain.event<{ rule: string; errorText?: string }>()\n        : createEvent<{ rule: string; errorText?: string }>()\n    const validate = domain ? domain.event() : createEvent()\n    const resetErrors = domain ? domain.event() : createEvent()\n    const reset = domain ? domain.event() : createEvent()\n\n    return {\n        changed,\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        $isValid: $firstError.map((firstError) => firstError === null),\n        $isDirty,\n        $touched,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        set: onChange,\n        reset,\n        resetErrors,\n        filter: fieldConfig.filter,\n    }\n}\n\ntype BindValidationParams = {\n  $form: Store<AnyFormValues>\n  submitEvent: Event<void>\n  field: Field<any>\n  rules: Rule<any, any>[]\n  formValidationEvents: ValidationEvent[]\n  fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    submitEvent,\n    field,\n    rules,\n    formValidationEvents,\n    fieldValidationEvents\n}: BindValidationParams): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors\n    } = field\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: submitEvent,\n        }))\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: changed,\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n        }),\n        clock: validate,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),  \n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue }) => validator(fieldValue, form)\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\nexport function bindChangeEvent(\n    { $value, $touched, onChange, changed, name, reset, filter }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n    resetForm: Event<void>,\n): void {\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name) \n                ? updateSet[name] \n                : curr\n        )\n        .reset(reset, resetForm)\n    \n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rules: Rule<Value, Form>[]\n) {\n    return (value: Value, form?: Form): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n\n        for (const rule of rules) {\n            const result = rule.validator(value, form)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { useStore } from \"effector-react\"\nimport { Event } from \"effector\"\nimport { Form, FormValues } from \"./factory\"\nimport {\n    Field,\n    ValidationError,\n    FieldConfig,\n    AnyFieldsConfigs\n} from \"./types\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  hasError: () => boolean\n  onChange: Event<Value>\n  onBlur: Event<void>\n  errorText: (map?: ErrorTextMap) => string\n  addError: Event<{ rule: string; errorText?: string }>\n  validate: Event<void>\n  isValid: boolean\n  isDirty: boolean\n  touched: boolean\n  reset: Event<void>\n  set: Event<Value>\n  resetErrors: Event<void>\n}\n\ntype ConnectedFields<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n  ? ConnectedField<U>\n  : never\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const value = useStore(field.$value)\n    const errors = useStore(field.$errors)\n    const firstError = useStore(field.$firstError)\n    const isValid = useStore(field.$isValid)\n    const isDirty = useStore(field.$isDirty)\n    const touched = useStore(field.$touched)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        onChange: field.onChange,\n        onBlur: field.onBlur,\n        addError: field.addError,\n        validate: field.validate,\n        reset: field.reset,\n        set: field.onChange,\n        resetErrors: field.resetErrors,\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Fields extends AnyFieldsConfigs> = {\n  fields: ConnectedFields<Fields>\n  values: FormValues<Fields>\n  hasError: (fieldName?: keyof Fields) => boolean\n  eachValid: boolean\n  isValid: boolean\n  isDirty: boolean\n  touched: boolean\n  errors: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U>[] : never\n  )\n  error: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U> : never\n  ) | null\n  errorText: (fieldName: keyof Fields, map?: ErrorTextMap) => string\n  submit: Event<void>\n  reset: Event<void>\n  setForm: Event<Partial<FormValues<Fields>>>\n  set: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\nexport function useForm<Fields extends AnyFieldsConfigs>(\n    form: Form<Fields>\n) {\n    const connectedFields = {} as AnyConnectedFields\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue \n        const field = form.fields[fieldName]\n\n        connectedFields[fieldName] = useField(field)\n    }\n\n    const values = useStore(form.$values)\n    const eachValid = useStore(form.$eachValid)\n    const isDirty = useStore(form.$isDirty)\n    const touched = useStore(form.$touched)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Fields>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        touched,\n        errors,\n        error,\n        reset: form.reset,\n        errorText,\n        submit: form.submit,\n        setForm: form.setForm,\n        set: form.setForm, // set form alias\n        formValidated: form.formValidated,\n    } as Result<Fields>\n}\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    createEvent,\n} from \"effector\"\nimport {\n    FieldConfig,\n    Field,\n    AnyFields,\n    AnyFieldsConfigs,\n    AnyFormValues,\n    FormConfig,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\n\nexport type FormValues<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n    ? U\n    : never\n}\n\nexport type Form<Fields extends AnyFieldsConfigs> = {\n  fields: {\n    [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n      ? Field<U>\n      : never\n  }\n  $values: Store<FormValues<Fields>>\n  $eachValid: Store<boolean>\n  $isValid: Store<boolean>\n  $isDirty: Store<boolean>\n  $touched: Store<boolean>\n  submit: Event<void>\n  reset: Event<void>\n  set: Event<Partial<FormValues<Fields>>>\n  setForm: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\n\nexport function createForm<Fields extends AnyFieldsConfigs>(\n    config: FormConfig<Fields>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n    } = config\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n \n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        const field = createField(fieldName, fieldConfig, domain)\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n  \n    const submitForm = domain ? domain.event<void>() : createEvent<void>()\n    const formValidated = domain \n        ? domain.event<AnyFormValues>()\n        : createEvent<AnyFormValues>()\n\n    const setForm = domain\n        ? domain.event<Partial<AnyFormValues>>()\n        : createEvent<Partial<AnyFormValues>>()\n\n    const resetForm = domain\n        ? domain.event<void>()\n        : createEvent<void>()\n\n    const submitWithFormData = sample($form, submitForm)\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm, resetForm)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn \n                : [],\n        })\n    }\n\n    guard({\n        source: submitWithFormData,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        $isValid: $eachValid,\n        $isDirty: $isDirty,\n        $touched: $touched,\n        submit: submitForm,\n        reset: resetForm,\n        setForm,\n        set: setForm,\n        formValidated,\n    } as unknown as Form<Fields>\n}\n"],"names":["createField","fieldName","fieldConfig","domain","initValue","init","$value","store","createStore","$errors","$firstError","map","errors","$isDirty","value","$touched","onChange","event","createEvent","onBlur","changed","addError","validate","resetErrors","reset","name","$isValid","firstError","set","filter","bindValidation","$form","submitEvent","field","rules","formValidationEvents","fieldValidationEvents","validator","form","rule","result","push","isValid","errorText","createCombineValidator","eventsNames","validationEvents","includes","sample","source","combine","fieldValue","clock","addErrorWithValue","fn","on","_","newError","bindChangeEvent","setForm","resetForm","guard","target","curr","updateSet","hasOwnProperty","useField","useStore","isDirty","touched","hasError","config","$filter","fields","fieldsConfigs","validateOn","dirtyFlagsArr","touchedFlagsArr","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","submitForm","formValidated","submitWithFormData","$values","submit","connectedFields","values"],"mappings":"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"}