{"version":3,"file":"effector-forms.cjs.js","sources":["../src/create-form-unit.ts","../src/field.ts","../src/validation.ts","../src/react-hooks.ts","../src/factory.ts"],"sourcesContent":["import { createStore, createEvent, Domain, EventCallable, StoreWritable }\n    from \"effector\"\n\ntype CreateStoreParams<Value> = {\n    init: Value\n    domain?: Domain\n    existing?: StoreWritable<Value>\n}\n\nfunction store<Value>(\n    { init, domain, existing }: CreateStoreParams<Value>,\n    effectorData?: any\n) {\n    if (existing) {\n        return existing\n    }\n    return domain\n        ? domain.createStore(init, effectorData)\n        : createStore(init, effectorData)\n}\n\ntype CreateEventParams<Value> = {\n    domain?: Domain\n    existing?: EventCallable<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.createEvent<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    EventCallable,\n    Store,\n    combine,\n    sample,\n    merge,\n    Event,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldData,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    AddErrorPayload,\n    FieldUnitShape,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\n/**\n * @group Factories\n */\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    }, {\n        sid: `${fieldName}-$value`\n    })\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    }, {\n        sid: `${fieldName}-$errors`\n    })\n\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $initValue = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$initValue,\n        init: initValue,\n    }, {\n        sid: `${fieldName}-$initValue`\n    })\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    }, {\n        sid: `${fieldName}-$touched`\n    })\n\n    const $isDirty = combine($value, $initValue,\n        (value, initValue) => value !== initValue,\n    )\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string\n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    const $isValid = $firstError.map((firstError) => firstError === null)\n    const $errorText = $firstError.map(\n        (firstError) => firstError?.errorText || \"\"\n    )\n\n    const $field = combine({\n        value: $value,\n        errors: $errors,\n        firstError: $firstError,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        isTouched: $touched,\n    })\n\n    const unitShape: FieldUnitShape<any> = {\n        value: $value,\n        initValue: $initValue,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        touched: $touched,\n        errors: $errors,\n        firstError: $firstError,\n        errorText: $errorText,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        reset,\n        resetErrors,\n        resetValue,\n    }\n\n    return {\n        changed,\n        \"name\": fieldName,\n        $initValue,\n        $value,\n        $errors,\n        $firstError,\n        $errorText,\n        $isValid,\n        $isDirty,\n        \"$isTouched\": $touched,\n        $touched,\n        \"$field\": $field as Store<FieldData<any>>,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        \"set\": onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        \"filter\": fieldConfig.filter,\n        \"@@unitShape\": () => unitShape,\n    }\n}\n\ntype BindValidationParams = {\n    form: {\n        $values: Store<AnyFormValues>\n        submit: EventCallable<void>\n        reset: EventCallable<void>\n        resetValues: EventCallable<void>\n        resetErrors: EventCallable<void>\n        addErrors: EventCallable<AddErrorPayload[]>\n        validate: EventCallable<void>\n        validateOn?: ValidationEvent[]\n    }\n    field: Field<any>\n    fieldConfig: FieldConfig<any>\n}\n\nexport function bindValidation(\n    params: BindValidationParams, effectorData?: any\n): void {\n    const { form, field, fieldConfig } = params\n    const rules = fieldConfig.rules || []\n    const formValidationEvents = form.validateOn || [\"submit\"]\n    const fieldValidationEvents = fieldConfig.validateOn || []\n\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = typeof rules === \"function\"\n        ? createStore<any[]>([], { sid: `${field.name}-$rulesSources` })\n        : combine(\n            rules.map(({ source }, i) => {\n                const sid = `${field.name}-$rulesSources-${i}`\n                return source || createStore(null, { sid })\n            })\n        )\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        const validationTrigger = sample({\n            source: combine({\n                fieldValue: $value,\n                form: form.$values,\n                rulesSources,\n            }),\n            clock: form.submit,\n        })\n\n        validationEvents.push(validationTrigger)\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: form.$values,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: form.$values,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, form.resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: form.$values,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: form.$values,\n            rulesSources,\n        }),\n        clock: form.validate,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),\n    })\n\n    const addErrorsWithValue = sample({\n        source: $value,\n        clock: form.addErrors,\n        fn: (value, errors) => ({\n            value,\n            newErrors: errors,\n        })\n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(\n                fieldValue,\n                form,\n                rulesSources,\n            )\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .on(addErrorsWithValue, (currErrors, { value, newErrors }) => {\n            const matchedErrors: ValidationError[] = []\n\n            for (const newError of newErrors) {\n                if (newError.field !== field.name) continue\n                matchedErrors.push({\n                    value,\n                    rule: newError.rule,\n                    errorText: newError.errorText,\n                })\n            }\n\n            return [...matchedErrors, ...currErrors]\n        })\n        .reset(resetErrors, form.reset, reset, form.resetErrors)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\ntype BindChangeEventParams = {\n    field: Field<any>\n    form: {\n        setForm: EventCallable<Partial<AnyFormValues>>\n        setInitialForm: EventCallable<Partial<AnyFormValues>>\n        resetForm: EventCallable<void>\n        resetTouched: EventCallable<void>\n        resetValues: EventCallable<void>\n    }\n}\n\nexport function bindChangeEvent({\n    field,\n    form,\n}: BindChangeEventParams): void {\n    const {\n        $value,\n        $initValue,\n        $touched,\n        onChange,\n        changed,\n        name,\n        reset,\n        resetValue,\n        filter\n    } = field\n\n    const {\n        setForm,\n        setInitialForm,\n        resetForm,\n        resetTouched,\n        resetValues\n    } = form\n\n    const resetValueWithInit = sample({\n        source: $initValue,\n        clock: merge([\n            reset,\n            resetValue,\n            resetValues,\n            resetForm\n        ]),\n    })\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n\n    if (filter) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        sample({\n            source: onChange,\n            filter: filter,\n            target: changed,\n        })\n    } else {\n        sample({\n            source: onChange,\n            filter: (() => true),\n            target: changed,\n        })\n    }\n\n\n    $initValue\n        .on(setInitialForm, (curr, updateSet) => updateSet.hasOwnProperty(name)\n            ? updateSet[name]\n            : curr\n        )\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            [setForm, setInitialForm],\n            (curr, updateSet) => updateSet.hasOwnProperty(name)\n                ? updateSet[name]\n                : curr\n        )\n        .on(resetValueWithInit, (_, initValue) => initValue)\n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n    RuleResolver,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rulesOrResolver: Rule<Value, Form, any>[] | RuleResolver<Value, Form>\n) {\n    return (\n        value: Value,\n        form: Form,\n        rulesSources?: any[]\n    ): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n        const rules = typeof rulesOrResolver === \"function\"\n            ? rulesOrResolver(value, form)\n            : rulesOrResolver\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n\n    const $firstErrors = combine(firstErrors)\n\n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { useUnit } from \"effector-react\"\nimport {\n    Field,\n    ValidationError,\n    AnyFormValues,\n    Form\n} from \"./types\"\n\ntype ErrorTextMap = {\n    [key: string]: string\n}\n\ntype AddErrorPayload = { rule: string; errorText?: string }\n\ntype ConnectedField<Value> = {\n    name: string\n    value: Value\n    errors: ValidationError<Value>[]\n    firstError: ValidationError<Value> | null\n    hasError: () => boolean\n    onChange: (v: Value) => Value\n    onBlur: (v: void) => void\n    errorText: (map?: ErrorTextMap) => string\n    addError: (p: AddErrorPayload) => AddErrorPayload\n    validate: (v: void) => void\n    isValid: boolean\n    isDirty: boolean\n    isTouched: boolean\n    touched: boolean\n    reset: (v: void) => void\n    set: (v: Value) => Value\n    resetErrors: (v: void) => void\n}\n\ntype ConnectedFields<Values extends AnyFormValues> = {\n    [K in keyof Values]: ConnectedField<Values[K]>\n}\n\ntype AnyConnectedFields = {\n    [key: string]: ConnectedField<any>\n}\n\n/**\n * @group Hooks\n */\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const {\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        isTouched: touched,\n    } = useUnit(field.$field)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: useUnit(field.onChange),\n        onBlur: useUnit(field.onBlur),\n        addError: useUnit(field.addError),\n        validate: useUnit(field.validate),\n        reset: useUnit(field.reset),\n        set: useUnit(field.onChange),\n        resetErrors: useUnit(field.resetErrors),\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Values extends AnyFormValues> = {\n    fields: ConnectedFields<Values>\n    values: Values\n    hasError: (fieldName?: keyof Values) => boolean\n    eachValid: boolean\n    isValid: boolean\n    isDirty: boolean\n    isTouched: boolean\n    touched: boolean\n    errors: (fieldName: keyof Values) => (\n        ValidationError<Values[typeof fieldName]>[]\n    )\n    error: (fieldName: keyof Values) => (\n        ValidationError<Values[typeof fieldName]>\n    ) | null\n    errorText: (fieldName: keyof Values, map?: ErrorTextMap) => string\n    submit: (p: void) => void\n    reset: (p: void) => void\n    setForm: (p: Partial<Values>) => Partial<Values>\n    set: (p: Partial<Values>) => Partial<Values>\n    formValidated: (p: Values) => Values\n}\n\n/**\n * @group Hooks\n */\nexport function useForm<Values extends AnyFormValues>(\n    form: Form<Values>\n): Result<Values> {\n    const connectedFields = {} as AnyConnectedFields\n    const values = {} as AnyFormValues\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue\n        const field = form.fields[fieldName]\n        const connectedField = useField(field)\n        connectedFields[fieldName] = connectedField\n        values[fieldName] = connectedField.value\n    }\n\n    const {\n        isValid: eachValid,\n        isDirty,\n        touched,\n    } = useUnit(form.$meta)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Values>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        errorText,\n        reset: useUnit(form.reset),\n        submit: useUnit(form.submit),\n        setForm: useUnit(form.setForm),\n        set: useUnit(form.setForm), // set form alias\n        formValidated: useUnit(form.formValidated),\n    } as Result<Values>\n}\n","import {\n    EventCallable,\n    Store,\n    combine,\n    sample,\n} from \"effector\"\nimport {\n    AnyFields,\n    AnyFormValues,\n    FormConfig,\n    Form,\n    AddErrorPayload,\n    FormUnitShape,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\n/**\n * This is the main factory in the library that creates\n * the forms shape according to the given configuration.\n * \n * Do not try to pass a type in the Values generic! Form types are inferred automatically from the passed \"fields\" object\n * \n * @param config - The form configuration object\n * @returns The shape of effector units\n * @example\n * \n * ```ts\n * const form = createForm({\n *      fields: {\n *          username: {\n *              init: \"\",\n *              rules: [\n *                  {\n *                      name: \"required\",\n *                      validator: (value: string) => Boolean(value)\n *                  }\n *              ]\n *          },\n *          bio: {\n *              init: \"\",\n *              rules: []\n *          }\n *      },\n *      validateOn: [\"change\"],\n * })\n * ```\n * @group Factories\n */\nexport function createForm<Values extends AnyFormValues>(\n    config: FormConfig<Values>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = createField(fieldName, fieldConfig, domain)\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const $meta = combine({\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n    })\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n\n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n\n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n    const setInitialForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setInitialForm as EventCallable<Partial<AnyFormValues>>\n    })\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as EventCallable<Partial<AnyFormValues>>,\n    })\n\n    const addErrors = createFormUnit.event<AddErrorPayload[]>({\n        domain,\n        existing: units?.addErrors,\n    })\n\n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: units?.resetErrors,\n    })\n\n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n\n    const submitWithFormData = sample({\n        source: $form,\n        clock: submitForm,\n    })\n    const validateWithFormData = sample({\n        source: $form,\n        clock: validate\n    })\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent({\n            form: {\n                setForm,\n                setInitialForm,\n                resetForm,\n                resetTouched,\n                resetValues\n            },\n            field,\n        })\n        bindValidation({\n            form: {\n                $values: $form,\n                submit: submitForm,\n                reset: resetForm,\n                addErrors,\n                resetValues,\n                resetErrors,\n                validate,\n                validateOn,\n            },\n            fieldConfig,\n            field,\n        }, { sid: fieldName })\n    }\n\n    sample({\n        source: submitWithFormData as unknown as EventCallable<Values>,\n        filter: $isFormValid,\n        // TODO: fix\n        target: formValidated,\n    })\n\n    sample({\n        source: validateWithFormData as unknown as EventCallable<Values>,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    const unitShape: FormUnitShape<any> = {\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n        submit: submitForm,\n        reset: resetForm,\n        addErrors: addErrors,\n        validate,\n        setForm,\n        setInitialForm,\n        resetTouched,\n        resetValues,\n        resetErrors,\n        formValidated,\n    }\n\n    return {\n        fields,\n        \"$values\": $form,\n        $eachValid,\n        \"$isValid\": $eachValid,\n        \"$isDirty\": $isDirty,\n        \"$touched\": $touched,\n        $meta,\n        \"submit\": submitForm,\n        validate,\n        resetTouched,\n        addErrors,\n        \"reset\": resetForm,\n        resetValues,\n        resetErrors,\n        setForm,\n        setInitialForm,\n        \"set\": setForm,\n        formValidated,\n        \"@@unitShape\": () => unitShape,\n    } as unknown as Form<Values>\n}\n"],"names":["createFormUnit","store","init","domain","existing","effectorData","createStore","and","sid","event","createEvent","createField","fieldName","fieldConfig","_fieldConfig$units","_fieldConfig$units2","_fieldConfig$units3","_fieldConfig$units4","_fieldConfig$units5","_fieldConfig$units6","_fieldConfig$units7","_fieldConfig$units8","_fieldConfig$units9","_fieldConfig$units10","_fieldConfig$units11","_fieldConfig$units12","initValue","$value","units","name","$errors","$firstError","map","errors","$initValue","$touched","$isTouched","$isDirty","combine","value","or","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$errorText","errorText","$field","isValid","isDirty","isTouched","unitShape","touched","set","filter","@@unitShape","bindValidation","params","form","field","rules","formValidationEvents","validateOn","fieldValidationEvents","rulesSources","source","i","validator","rulesOrResolver","length","rule","result","push","eventsNames","validationEvents","includes","validationTrigger","sample","fieldValue","$values","clock","submit","merge","resetValues","addErrorWithValue","fn","addErrorsWithValue","addErrors","newErrors","on","_","newError","currErrors","matchedErrors","bindChangeEvent","setForm","setInitialForm","resetForm","resetTouched","resetValueWithInit","target","curr","updateSet","hasOwnProperty","useField","useUnit","hasError","config","$filter","fields","fieldsConfigs","dirtyFlagsArr","touchedFlagsArr","$form","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","submitForm","formValidated","submitWithFormData","validateWithFormData","connectedFields","values","connectedField"],"mappings":"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"}