{"version":3,"file":"index.js","sources":["../src/create-form-unit.ts","../src/field.ts","../src/validation.ts","../src/factory.ts","../src/react-hooks.ts"],"sourcesContent":["import { createStore, createEvent, Domain, Store, Event } from \"effector\"\n\ntype CreateStoreParams<Value> = {\n  init: Value\n  domain?: Domain\n  existing?: Store<Value>\n}\n\nfunction store<Value>({ init, domain, existing }: CreateStoreParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.store(init) : createStore(init)\n}\n\ntype CreateEventParams<Value> = {\n  domain?: Domain\n  existing?: Event<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.event<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    Event,\n    Store,\n    combine, \n    sample,\n    guard,\n    merge,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldData,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n    RuleResolver,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    })\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    })\n    \n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $isDirty = $value.map((value) => value !== initValue)\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    })\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string \n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    const $isValid = $firstError.map((firstError) => firstError === null)\n\n    const $field = combine({\n        value: $value,\n        errors: $errors,\n        firstError: $firstError,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        isTouched: $touched,\n    })\n\n    return {\n        changed,\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        $isValid,\n        $isDirty,\n        $isTouched: $touched,\n        $touched,\n        $field: $field as Store<FieldData<any>>,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        set: onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        filter: fieldConfig.filter,\n    }\n}\n\ntype BindValidationParams = {\n  $form: Store<AnyFormValues>\n  validateFormEvent: Event<void>\n  submitEvent: Event<void>\n  resetFormEvent: Event<void>\n  resetValues: Event<void>\n  resetErrors: Event<void>\n  field: Field<any>\n  rules: Rule<any, any>[] | RuleResolver<any, any>\n  formValidationEvents: ValidationEvent[]\n  fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    validateFormEvent,\n    submitEvent,\n    resetFormEvent,\n    resetValues,\n    field,\n    rules,\n    resetErrors: resetErrorsFormEvent,\n    formValidationEvents,\n    fieldValidationEvents,\n}: BindValidationParams): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = typeof rules === \"function\" \n        ? createStore<any[]>([])\n        : combine(rules.map(({ source }) => source || createStore(null)))\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        const validationTrigger = sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: submitEvent,\n        })\n\n        validationEvents.push(validationTrigger)\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validateFormEvent,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),  \n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(\n                fieldValue,\n                form,\n                rulesSources,\n            )\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors, resetFormEvent, reset, resetErrorsFormEvent)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\nexport function bindChangeEvent(\n    {\n        $value,\n        $touched,\n        onChange,\n        changed,\n        name,\n        reset,\n        resetValue, \n        filter }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n    resetForm: Event<void>,\n    resetTouched: Event<void>,\n    resetValues: Event<void>,\n): void {\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name) \n                ? updateSet[name] \n                : curr\n        )\n        .reset(reset, resetValue, resetValues, resetForm)\n    \n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n    RuleResolver,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rulesOrResolver: Rule<Value, Form, any>[] | RuleResolver<Value, Form>\n) {\n    return (\n        value: Value,\n        form: Form,\n        rulesSources?: any[]\n    ): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n        const rules = typeof rulesOrResolver === \"function\"\n            ? rulesOrResolver(value, form)\n            : rulesOrResolver\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n} from \"effector\"\nimport {\n    FieldConfig,\n    Field,\n    AnyFields,\n    AnyFieldsConfigs,\n    AnyFormValues,\n    FormConfig,\n    FormValues,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\n\nexport type Form<Fields extends AnyFieldsConfigs> = {\n  fields: {\n    [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n      ? Field<U>\n      : never\n  }\n  $values: Store<FormValues<Fields>>\n  $eachValid: Store<boolean>\n  $isValid: Store<boolean>\n  $isDirty: Store<boolean>\n  $touched: Store<boolean>\n  $meta: Store<{\n    isValid: boolean\n    isDirty: boolean\n    touched: boolean\n  }>\n  submit: Event<void>\n  validate: Event<void>\n  reset: Event<void>\n  set: Event<Partial<FormValues<Fields>>>\n  setForm: Event<Partial<FormValues<Fields>>>\n  resetTouched: Event<void>\n  resetValues: Event<void>\n  resetErrors: Event<void>\n  formValidated: Event<FormValues<Fields>>\n}\n\n\nexport function createForm<Fields extends AnyFieldsConfigs>(\n    config: FormConfig<Fields>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n \n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        const field = createField(fieldName, fieldConfig, domain)\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const $meta = combine({\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n    })\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n  \n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n    \n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as Event<Partial<AnyFormValues>>,\n    })\n    \n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: units?.resetErrors,\n    })\n    \n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n    \n    const submitWithFormData = sample($form, submitForm)\n    const validateWithFormData = sample($form, validate)\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm, resetForm, resetTouched, resetValues)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            resetFormEvent: resetForm,\n            resetValues,\n            resetErrors,\n            validateFormEvent: validate,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn \n                : [],\n        })\n    }\n\n    guard({\n        source: submitWithFormData,\n        filter: $isFormValid,\n        // TODO: fix\n        target: formValidated as unknown as Event<AnyFormValues>,\n    })\n\n    guard({\n        source: validateWithFormData,\n        filter: $isFormValid,\n        target: formValidated as unknown as Event<AnyFormValues>,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        $isValid: $eachValid,\n        $isDirty: $isDirty,\n        $touched: $touched,\n        $meta,\n        submit: submitForm,\n        validate,\n        resetTouched,\n        reset: resetForm,\n        resetValues,\n        resetErrors,\n        setForm,\n        set: setForm,\n        formValidated,\n    } as unknown as Form<Fields>\n}\n","import { useStore } from \"effector-react\"\nimport { Event } from \"effector\"\nimport { Form } from \"./factory\"\nimport {\n    Field,\n    FormValues,\n    ValidationError,\n    FieldConfig,\n    AnyFieldsConfigs,\n    AnyFormValues\n} from \"./types\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  hasError: () => boolean\n  onChange: Event<Value>\n  onBlur: Event<void>\n  errorText: (map?: ErrorTextMap) => string\n  addError: Event<{ rule: string; errorText?: string }>\n  validate: Event<void>\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  reset: Event<void>\n  set: Event<Value>\n  resetErrors: Event<void>\n}\n\ntype ConnectedFields<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n  ? ConnectedField<U>\n  : never\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const {\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        isTouched: touched,\n    } = useStore(field.$field)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: field.onChange,\n        onBlur: field.onBlur,\n        addError: field.addError,\n        validate: field.validate,\n        reset: field.reset,\n        set: field.onChange,\n        resetErrors: field.resetErrors,\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Fields extends AnyFieldsConfigs> = {\n  fields: ConnectedFields<Fields>\n  values: FormValues<Fields>\n  hasError: (fieldName?: keyof Fields) => boolean\n  eachValid: boolean\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  errors: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U>[] : never\n  )\n  error: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U> : never\n  ) | null\n  errorText: (fieldName: keyof Fields, map?: ErrorTextMap) => string\n  submit: Event<void>\n  reset: Event<void>\n  setForm: Event<Partial<FormValues<Fields>>>\n  set: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\nexport function useForm<Fields extends AnyFieldsConfigs>(\n    form: Form<Fields>\n) {\n    const connectedFields = {} as AnyConnectedFields\n    const values = {} as AnyFormValues\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue \n        const field = form.fields[fieldName]\n        const connectedField = useField(field)\n        connectedFields[fieldName] = connectedField\n        values[fieldName] = connectedField.value\n    }\n\n    const {\n        isValid: eachValid,\n        isDirty,\n        touched,\n    } = useStore(form.$meta)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Fields>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        reset: form.reset,\n        errorText,\n        submit: form.submit,\n        setForm: form.setForm,\n        set: form.setForm, // set form alias\n        formValidated: form.formValidated,\n    } as Result<Fields>\n}\n"],"names":["createFormUnit","store","init","domain","existing","createStore","event","createEvent","createField","fieldName","fieldConfig","initValue","$value","units","$errors","$firstError","map","errors","$isDirty","value","$touched","$isTouched","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","name","$field","combine","isValid","isDirty","isTouched","set","filter","bindValidation","$form","validateFormEvent","submitEvent","resetFormEvent","resetValues","field","rules","resetErrorsFormEvent","formValidationEvents","fieldValidationEvents","rulesSources","source","validator","rulesOrResolver","form","i","length","rule","result","push","errorText","eventsNames","validationEvents","includes","validationTrigger","sample","fieldValue","clock","merge","addErrorWithValue","fn","on","_","newError","bindChangeEvent","setForm","resetForm","resetTouched","guard","target","curr","updateSet","hasOwnProperty","createForm","config","$filter","fields","fieldsConfigs","validateOn","dirtyFlagsArr","touchedFlagsArr","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","touched","submitForm","submit","formValidated","submitWithFormData","validateWithFormData","$values","useField","useStore","hasError","useForm","connectedFields","values","connectedField"],"mappings":"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"}