{"version":3,"file":"effector-form.iife.js","sources":["../src/field.ts","../src/validation.ts","../src/react-hooks.ts","../src/factory.ts"],"sourcesContent":["import {\n    Domain,\n    Event,\n    Store,\n    createStore,\n    createEvent,\n    combine, \n    sample,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = domain ? domain.store(initValue) : createStore(initValue)\n\n    const $errors = domain\n        ? domain.store<ValidationError[]>([])\n        : createStore<ValidationError[]>([])\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const onChange = domain ? domain.event() : createEvent()\n    const onBlur = domain ? domain.event() : createEvent()\n\n    return {\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        onChange,\n        onBlur,\n    }\n}\n\ntype BindValidationParams = {\n  $form: Store<AnyFormValues>\n  submitEvent: Event<void>\n  field: Field<any>\n  rules: Rule<any, any>[]\n  formValidationEvents: ValidationEvent[]\n  fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    submitEvent,\n    field,\n    rules,\n    formValidationEvents,\n    fieldValidationEvents\n}: BindValidationParams): void {\n    const { $value, $errors, onBlur, onChange } = field\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: submitEvent,\n        }))\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: onChange,\n        }))\n    }\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue }) => validator(fieldValue, form)\n        )\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(onChange)\n    }\n}\n\nexport function bindChangeEvent(\n    { $value, onChange, name }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n): void {\n\n    $value\n        .on(onChange, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name) \n                ? updateSet[name] \n                : curr\n        )\n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rules: Rule<Value, Form>[]\n) {\n    return (value: Value, form?: Form): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n\n        for (const rule of rules) {\n            const result = rule.validator(value, form)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { useStore } from \"effector-react\"\nimport { Event } from \"effector\"\nimport { Form, FormValues } from \"./factory\"\nimport {\n    Field,\n    ValidationError,\n    FieldConfig,\n    AnyFieldsConfigs\n} from \"./types\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  onChange: Event<Value>\n  onBlur: Event<void>\n  errorText: (map?: ErrorTextMap) => string\n}\n\ntype ConnectedFields<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n  ? ConnectedField<U>\n  : never\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const value = useStore(field.$value)\n    const errors = useStore(field.$errors)\n    const firstError = useStore(field.$firstError)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        onChange: field.onChange,\n        onBlur: field.onBlur,\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Fields extends AnyFieldsConfigs> = {\n  fields: ConnectedFields<Fields>\n  values: FormValues<Fields>\n  hasError: (fieldName?: keyof Fields) => boolean\n  eachValid: boolean\n  errors: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U>[] : never\n  )\n  error: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U> : never\n  ) | null\n  errorText: (fieldName: keyof Fields, map?: ErrorTextMap) => string\n  submit: Event<void>\n  setForm: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\nexport function useForm<Fields extends AnyFieldsConfigs>(\n    form: Form<Fields>\n) {\n    const connectedFields = {} as AnyConnectedFields\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue \n        const field = form.fields[fieldName]\n\n        connectedFields[fieldName] = useField(field)\n    }\n\n    const values = useStore(form.$values)\n    const eachValid = useStore(form.$eachValid)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Fields>,\n        values,\n        hasError,\n        eachValid,\n        errors,\n        error,\n        errorText,\n        submit: form.submit,\n        setForm: form.setForm,\n        formValidated: form.formValidated,\n    } as Result<Fields>\n}\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    createEvent,\n} from \"effector\"\nimport {\n    FieldConfig,\n    Field,\n    AnyFields,\n    AnyFieldsConfigs,\n    AnyFormValues,\n    FormConfig,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\n\nexport type FormValues<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n    ? U\n    : never\n}\n\nexport type Form<Fields extends AnyFieldsConfigs> = {\n  fields: {\n    [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n      ? Field<U>\n      : never\n  }\n  $values: Store<FormValues<Fields>>\n  $eachValid: Store<boolean>\n  submit: Event<void>\n  setForm: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\n\nexport function createForm<Fields extends AnyFieldsConfigs>(\n    config: FormConfig<Fields>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n    } = config\n\n    const fields: AnyFields = {}\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        fields[fieldName] = createField(fieldName, fieldConfig, domain)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n  \n    const submitForm = domain ? domain.event<void>() : createEvent<void>()\n    const formValidated = domain \n        ? domain.event<AnyFormValues>()\n        : createEvent<AnyFormValues>()\n\n    const setForm = domain\n        ? domain.event<Partial<AnyFormValues>>()\n        : createEvent<Partial<AnyFormValues>>()\n\n    const submitWithFormData = sample($form, submitForm)\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn \n                : [],\n        })\n    }\n\n    guard({\n        source: submitWithFormData,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        submit: submitForm,\n        setForm,\n        formValidated,\n    } as unknown as Form<Fields>\n}\n"],"names":["createField","fieldName","fieldConfig","domain","initValue","init","$value","store","createStore","$errors","$firstError","map","errors","name","onChange","event","createEvent","onBlur","bindValidation","$form","submitEvent","field","rules","formValidationEvents","fieldValidationEvents","validator","value","form","rule","result","push","isValid","errorText","createCombineValidator","eventsNames","validationEvents","includes","sample","source","combine","fieldValue","clock","on","_","reset","bindChangeEvent","setForm","curr","updateSet","hasOwnProperty","useField","useStore","firstError","config","filter","$filter","fields","fieldsConfigs","validateOn","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","submitForm","formValidated","submitWithFormData","guard","target","$values","submit","connectedFields","values","hasError","Boolean"],"mappings":"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"}