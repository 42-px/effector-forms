{"version":3,"file":"effector-forms.umd.js","sources":["../src/field.ts","../src/validation.ts","../src/react-hooks.ts","../src/factory.ts"],"sourcesContent":["import {\n    Domain,\n    Event,\n    Store,\n    createStore,\n    createEvent,\n    combine, \n    sample,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = domain ? domain.store(initValue) : createStore(initValue)\n\n    const $errors = domain\n        ? domain.store<ValidationError[]>([])\n        : createStore<ValidationError[]>([])\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const onChange = domain ? domain.event() : createEvent()\n    const onBlur = domain ? domain.event() : createEvent()\n    const addError = domain\n        ? domain.event<{ rule: string; errorText?: string }>()\n        : createEvent<{ rule: string; errorText?: string }>()\n    const validate = domain ? domain.event() : createEvent()\n    const resetErrors = domain ? domain.event() : createEvent()\n\n    return {\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        resetErrors,\n    }\n}\n\ntype BindValidationParams = {\n  $form: Store<AnyFormValues>\n  submitEvent: Event<void>\n  field: Field<any>\n  rules: Rule<any, any>[]\n  formValidationEvents: ValidationEvent[]\n  fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    submitEvent,\n    field,\n    rules,\n    formValidationEvents,\n    fieldValidationEvents\n}: BindValidationParams): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        onChange,\n        addError,\n        validate,\n        resetErrors\n    } = field\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: submitEvent,\n        }))\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n            }),\n            clock: onChange,\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n        }),\n        clock: validate,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),  \n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue }) => validator(fieldValue, form)\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(onChange)\n    }\n}\n\nexport function bindChangeEvent(\n    { $value, onChange, name }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n): void {\n\n    $value\n        .on(onChange, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name) \n                ? updateSet[name] \n                : curr\n        )\n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rules: Rule<Value, Form>[]\n) {\n    return (value: Value, form?: Form): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n\n        for (const rule of rules) {\n            const result = rule.validator(value, form)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { useStore } from \"effector-react\"\nimport { Event } from \"effector\"\nimport { Form, FormValues } from \"./factory\"\nimport {\n    Field,\n    ValidationError,\n    FieldConfig,\n    AnyFieldsConfigs\n} from \"./types\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  onChange: Event<Value>\n  onBlur: Event<void>\n  errorText: (map?: ErrorTextMap) => string\n  addError: Event<{ rule: string; errorText?: string }>\n  validate: Event<void>\n  resetErrors: Event<void>\n}\n\ntype ConnectedFields<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n  ? ConnectedField<U>\n  : never\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const value = useStore(field.$value)\n    const errors = useStore(field.$errors)\n    const firstError = useStore(field.$firstError)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        onChange: field.onChange,\n        onBlur: field.onBlur,\n        addError: field.addError,\n        validate: field.validate,\n        resetErrors: field.resetErrors,\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Fields extends AnyFieldsConfigs> = {\n  fields: ConnectedFields<Fields>\n  values: FormValues<Fields>\n  hasError: (fieldName?: keyof Fields) => boolean\n  eachValid: boolean\n  errors: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U>[] : never\n  )\n  error: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U> : never\n  ) | null\n  errorText: (fieldName: keyof Fields, map?: ErrorTextMap) => string\n  submit: Event<void>\n  setForm: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\nexport function useForm<Fields extends AnyFieldsConfigs>(\n    form: Form<Fields>\n) {\n    const connectedFields = {} as AnyConnectedFields\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue \n        const field = form.fields[fieldName]\n\n        connectedFields[fieldName] = useField(field)\n    }\n\n    const values = useStore(form.$values)\n    const eachValid = useStore(form.$eachValid)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Fields>,\n        values,\n        hasError,\n        eachValid,\n        errors,\n        error,\n        errorText,\n        submit: form.submit,\n        setForm: form.setForm,\n        formValidated: form.formValidated,\n    } as Result<Fields>\n}\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    createEvent,\n} from \"effector\"\nimport {\n    FieldConfig,\n    Field,\n    AnyFields,\n    AnyFieldsConfigs,\n    AnyFormValues,\n    FormConfig,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\n\nexport type FormValues<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n    ? U\n    : never\n}\n\nexport type Form<Fields extends AnyFieldsConfigs> = {\n  fields: {\n    [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n      ? Field<U>\n      : never\n  }\n  $values: Store<FormValues<Fields>>\n  $eachValid: Store<boolean>\n  submit: Event<void>\n  setForm: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\n\nexport function createForm<Fields extends AnyFieldsConfigs>(\n    config: FormConfig<Fields>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n    } = config\n\n    const fields: AnyFields = {}\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        fields[fieldName] = createField(fieldName, fieldConfig, domain)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n  \n    const submitForm = domain ? domain.event<void>() : createEvent<void>()\n    const formValidated = domain \n        ? domain.event<AnyFormValues>()\n        : createEvent<AnyFormValues>()\n\n    const setForm = domain\n        ? domain.event<Partial<AnyFormValues>>()\n        : createEvent<Partial<AnyFormValues>>()\n\n    const submitWithFormData = sample($form, submitForm)\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn \n                : [],\n        })\n    }\n\n    guard({\n        source: submitWithFormData,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        submit: submitForm,\n        setForm,\n        formValidated,\n    } as unknown as Form<Fields>\n}\n"],"names":["createField","fieldName","fieldConfig","domain","initValue","init","$value","store","createStore","$errors","$firstError","map","errors","name","onChange","event","createEvent","onBlur","addError","validate","resetErrors","bindValidation","$form","submitEvent","field","rules","formValidationEvents","fieldValidationEvents","validator","value","form","rule","result","push","isValid","errorText","createCombineValidator","eventsNames","validationEvents","includes","sample","source","combine","fieldValue","clock","addErrorWithValue","fn","on","_","newError","reset","bindChangeEvent","setForm","curr","updateSet","hasOwnProperty","useField","useStore","firstError","config","filter","$filter","fields","fieldsConfigs","validateOn","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","submitForm","formValidated","submitWithFormData","guard","target","$values","submit","connectedFields","values","hasError","Boolean"],"mappings":"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"}