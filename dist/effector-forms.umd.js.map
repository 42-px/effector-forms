{"version":3,"file":"effector-forms.umd.js","sources":["../src/create-form-unit.ts","../src/field.ts","../src/validation.ts","../src/react-hooks.ts","../src/factory.ts"],"sourcesContent":["import { createStore, createEvent, Domain, Store, Event } from \"effector\"\n\ntype CreateStoreParams<Value> = {\n  init: Value\n  domain?: Domain\n  existing?: Store<Value>\n}\n\nfunction store<Value>({ init, domain, existing }: CreateStoreParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.store(init) : createStore(init)\n}\n\ntype CreateEventParams<Value> = {\n  domain?: Domain\n  existing?: Event<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.event<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    Event,\n    Store,\n    combine, \n    sample,\n    guard,\n    merge,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    })\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    })\n    \n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $isDirty = $value.map((value) => value !== initValue)\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    })\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string \n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    return {\n        changed,\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        $isValid: $firstError.map((firstError) => firstError === null),\n        $isDirty,\n        $isTouched: $touched,\n        $touched,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        set: onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        filter: fieldConfig.filter,\n    }\n}\n\ntype BindValidationParams = {\n  $form: Store<AnyFormValues>\n  validateFormEvent: Event<void>\n  submitEvent: Event<void>\n  resetFormEvent: Event<void>\n  resetValues: Event<void>\n  field: Field<any>\n  rules: Rule<any, any>[]\n  formValidationEvents: ValidationEvent[]\n  fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    validateFormEvent,\n    submitEvent,\n    resetFormEvent,\n    resetValues,\n    field,\n    rules,\n    formValidationEvents,\n    fieldValidationEvents,\n}: BindValidationParams): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = combine(rules.map(({ source }) => source || createStore(null)))\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: submitEvent,\n        }))\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validateFormEvent,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),  \n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(fieldValue, form, rulesSources)\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors, resetFormEvent, reset)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\nexport function bindChangeEvent(\n    { $value, $touched, onChange, changed, name, reset, resetValue,  filter }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n    resetForm: Event<void>,\n    resetTouched: Event<void>,\n    resetValues: Event<void>,\n): void {\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name) \n                ? updateSet[name] \n                : curr\n        )\n        .reset(reset, resetValue, resetValues, resetForm)\n    \n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rules: Rule<Value, Form, any>[]\n) {\n    return (value: Value, form?: Form, rulesSources?: any[]): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { useStore } from \"effector-react\"\nimport { Event } from \"effector\"\nimport { Form } from \"./factory\"\nimport {\n    Field,\n    FormValues,\n    ValidationError,\n    FieldConfig,\n    AnyFieldsConfigs\n} from \"./types\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  hasError: () => boolean\n  onChange: Event<Value>\n  onBlur: Event<void>\n  errorText: (map?: ErrorTextMap) => string\n  addError: Event<{ rule: string; errorText?: string }>\n  validate: Event<void>\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  reset: Event<void>\n  set: Event<Value>\n  resetErrors: Event<void>\n}\n\ntype ConnectedFields<Fields extends AnyFieldsConfigs> = {\n  [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n  ? ConnectedField<U>\n  : never\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const value = useStore(field.$value)\n    const errors = useStore(field.$errors)\n    const firstError = useStore(field.$firstError)\n    const isValid = useStore(field.$isValid)\n    const isDirty = useStore(field.$isDirty)\n    const touched = useStore(field.$touched)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: field.onChange,\n        onBlur: field.onBlur,\n        addError: field.addError,\n        validate: field.validate,\n        reset: field.reset,\n        set: field.onChange,\n        resetErrors: field.resetErrors,\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Fields extends AnyFieldsConfigs> = {\n  fields: ConnectedFields<Fields>\n  values: FormValues<Fields>\n  hasError: (fieldName?: keyof Fields) => boolean\n  eachValid: boolean\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  errors: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U>[] : never\n  )\n  error: (fieldName: keyof Fields) => (\n    // eslint-disable-next-line max-len\n    Fields[typeof fieldName] extends FieldConfig<infer U> ? ValidationError<U> : never\n  ) | null\n  errorText: (fieldName: keyof Fields, map?: ErrorTextMap) => string\n  submit: Event<void>\n  reset: Event<void>\n  setForm: Event<Partial<FormValues<Fields>>>\n  set: Event<Partial<FormValues<Fields>>>\n  formValidated: Event<FormValues<Fields>>\n}\n\nexport function useForm<Fields extends AnyFieldsConfigs>(\n    form: Form<Fields>\n) {\n    const connectedFields = {} as AnyConnectedFields\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue \n        const field = form.fields[fieldName]\n\n        connectedFields[fieldName] = useField(field)\n    }\n\n    const values = useStore(form.$values)\n    const eachValid = useStore(form.$eachValid)\n    const isDirty = useStore(form.$isDirty)\n    const touched = useStore(form.$touched)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Fields>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        reset: form.reset,\n        errorText,\n        submit: form.submit,\n        setForm: form.setForm,\n        set: form.setForm, // set form alias\n        formValidated: form.formValidated,\n    } as Result<Fields>\n}\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n} from \"effector\"\nimport {\n    FieldConfig,\n    Field,\n    AnyFields,\n    AnyFieldsConfigs,\n    AnyFormValues,\n    FormConfig,\n    FormValues,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\n\nexport type Form<Fields extends AnyFieldsConfigs> = {\n  fields: {\n    [K in keyof Fields]: Fields[K] extends FieldConfig<infer U>\n      ? Field<U>\n      : never\n  }\n  $values: Store<FormValues<Fields>>\n  $eachValid: Store<boolean>\n  $isValid: Store<boolean>\n  $isDirty: Store<boolean>\n  $touched: Store<boolean>\n  submit: Event<void>\n  validate: Event<void>\n  reset: Event<void>\n  set: Event<Partial<FormValues<Fields>>>\n  setForm: Event<Partial<FormValues<Fields>>>\n  resetTouched: Event<void>\n  resetValues: Event<void>\n  formValidated: Event<FormValues<Fields>>\n}\n\n\nexport function createForm<Fields extends AnyFieldsConfigs>(\n    config: FormConfig<Fields>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n \n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        const field = createField(fieldName, fieldConfig, domain)\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n  \n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n    \n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as Event<Partial<AnyFormValues>>,\n    })\n    \n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n    \n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n    \n    const submitWithFormData = sample($form, submitForm)\n    const validateWithFormData = sample($form, validate)\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm, resetForm, resetTouched, resetValues)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            resetFormEvent: resetForm,\n            resetValues,\n            validateFormEvent: validate,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn \n                : [],\n        })\n    }\n\n    guard({\n        source: submitWithFormData,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    guard({\n        source: validateWithFormData,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        $isValid: $eachValid,\n        $isDirty: $isDirty,\n        $touched: $touched,\n        submit: submitForm,\n        validate,\n        resetTouched,\n        reset: resetForm,\n        resetValues,\n        setForm,\n        set: setForm,\n        formValidated,\n    } as unknown as Form<Fields>\n}\n"],"names":["createFormUnit","store","init","domain","existing","createStore","event","createEvent","createField","fieldName","fieldConfig","initValue","$value","units","$errors","$firstError","map","errors","$isDirty","value","$touched","$isTouched","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","name","$isValid","firstError","set","filter","bindValidation","$form","validateFormEvent","submitEvent","resetFormEvent","resetValues","field","rules","formValidationEvents","fieldValidationEvents","rulesSources","combine","source","validator","form","i","length","rule","result","push","errorText","isValid","createCombineValidator","eventsNames","validationEvents","includes","sample","fieldValue","clock","merge","addErrorWithValue","fn","on","_","newError","bindChangeEvent","setForm","resetForm","resetTouched","guard","target","curr","updateSet","hasOwnProperty","useField","useStore","isDirty","touched","isTouched","hasError","config","$filter","fields","fieldsConfigs","validateOn","dirtyFlagsArr","touchedFlagsArr","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","submitForm","submit","formValidated","submitWithFormData","validateWithFormData","$values","connectedFields","values"],"mappings":"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"}