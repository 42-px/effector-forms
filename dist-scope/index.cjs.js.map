{"version":3,"file":"index.cjs.js","sources":["../src/validation.ts","../src/create-form-unit.ts","../src/field.ts","../src/scope.ts","../src/factory.ts","../src/react-hooks.ts"],"sourcesContent":["import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n    RuleResolver,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rulesOrResolver: Rule<Value, Form, any>[] | RuleResolver<Value, Form>\n) {\n    return (\n        value: Value,\n        form: Form,\n        rulesSources?: any[]\n    ): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n        const rules = typeof rulesOrResolver === \"function\"\n            ? rulesOrResolver(value, form)\n            : rulesOrResolver\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { createStore, createEvent, Domain, Store, Event } from \"effector\"\n\ntype CreateStoreParams<Value> = {\n  init: Value\n  domain?: Domain\n  existing?: Store<Value>\n}\n\nfunction store<Value>(\n    { init, domain, existing }: CreateStoreParams<Value>,\n    effectorData?: any\n) {\n    if (existing) {\n        return existing\n    }\n    return domain\n        ? domain.store(init, effectorData)\n        : createStore(init, effectorData)\n}\n\ntype CreateEventParams<Value> = {\n  domain?: Domain\n  existing?: Event<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.event<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    merge,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldData,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n    RuleResolver,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n    effectorData?: any,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    }, effectorData)\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    }, effectorData)\n\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $isDirty = $value.map((value) => value !== initValue)\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    }, effectorData)\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string\n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    const $isValid = $firstError.map((firstError) => firstError === null)\n\n    const $field = combine({\n        value: $value,\n        errors: $errors,\n        firstError: $firstError,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        isTouched: $touched,\n    })\n\n    return {\n        changed,\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        $isValid,\n        $isDirty,\n        $isTouched: $touched,\n        $touched,\n        $field: $field as Store<FieldData<any>>,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        set: onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        filter: fieldConfig.filter,\n    }\n}\n\ntype BindValidationParams = {\n    $form: Store<AnyFormValues>\n    validateFormEvent: Event<void>\n    submitEvent: Event<void>\n    resetFormEvent: Event<void>\n    resetValues: Event<void>\n    resetErrors: Event<void>\n    field: Field<any>\n    rules: Rule<any, any>[] | RuleResolver<any, any>\n    formValidationEvents: ValidationEvent[]\n    fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    validateFormEvent,\n    submitEvent,\n    resetFormEvent,\n    resetValues,\n    field,\n    rules,\n    resetErrors: resetErrorsFormEvent,\n    formValidationEvents,\n    fieldValidationEvents,\n}: BindValidationParams,\neffectorData?: any): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = typeof rules === \"function\"\n        ? createStore<any[]>([], effectorData)\n        : combine(\n            rules.map(({ source }) => source || createStore(null, effectorData))\n        )\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        const validationTrigger = sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: submitEvent,\n        })\n\n        validationEvents.push(validationTrigger)\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validateFormEvent,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),\n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(\n                fieldValue,\n                form,\n                rulesSources,\n            )\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors, resetFormEvent, reset, resetErrorsFormEvent)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\nexport function bindChangeEvent(\n    {\n        $value,\n        $touched,\n        onChange,\n        changed,\n        name,\n        reset,\n        resetValue,\n        filter }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n    resetForm: Event<void>,\n    resetTouched: Event<void>,\n    resetValues: Event<void>,\n): void {\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name)\n                ? updateSet[name]\n                : curr\n        )\n        .reset(reset, resetValue, resetValues, resetForm)\n\n}\n","import { Event } from \"effector\"\nimport { useEvent } from \"effector-react\"\n\nexport function isScope() {\n    return process.env.IS_SCOPE_BUILD === \"true\"\n}\n\nexport function isLegacySSRBuild() {\n    return process.env.IS_LEGACY_SSR_BUILD === \"true\"\n}\n\nexport function wrapEvent<P>(event: Event<P>) {\n    return isScope() ? useEvent(event) : event\n}\n\n\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n} from \"effector\"\nimport {\n    AnyFields,\n    AnyFormValues,\n    FormConfig,\n    Form,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\nimport { isScope, isLegacySSRBuild } from \"./scope\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\nexport function createForm<Values extends AnyFormValues>(\n    config: FormConfig<Values>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    if (isScope() && isLegacySSRBuild() && !domain) {\n        throw new Error(\"domain option is required in ssr mode!\")\n    }\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        const field = createField(fieldName, fieldConfig, domain, {\n            sid: fieldName\n        })\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const $meta = combine({\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n    })\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n\n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n\n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as Event<Partial<AnyFormValues>>,\n    })\n\n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: units?.resetErrors,\n    })\n\n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n\n    const submitWithFormData = sample({\n        source: $form,\n        clock: submitForm,\n    })\n    const validateWithFormData = sample({\n        source: $form,\n        clock: validate\n    })\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm, resetForm, resetTouched, resetValues)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            resetFormEvent: resetForm,\n            resetValues,\n            resetErrors,\n            validateFormEvent: validate,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn\n                : [],\n        }, { sid: fieldName })\n    }\n\n    guard({\n        source: submitWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        // TODO: fix\n        target: formValidated,\n    })\n\n    guard({\n        source: validateWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        $isValid: $eachValid,\n        $isDirty: $isDirty,\n        $touched: $touched,\n        $meta,\n        submit: submitForm,\n        validate,\n        resetTouched,\n        reset: resetForm,\n        resetValues,\n        resetErrors,\n        setForm,\n        set: setForm,\n        formValidated,\n    } as unknown as Form<Values>\n}\n","import { useStore } from \"effector-react\"\nimport {\n    Field,\n    ValidationError,\n    AnyFormValues,\n    Form\n} from \"./types\"\nimport { wrapEvent } from \"./scope\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype AddErrorPayload = { rule: string; errorText?: string }\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  hasError: () => boolean\n  onChange: (v: Value) => Value\n  onBlur: (v: void) => void\n  errorText: (map?: ErrorTextMap) => string\n  addError: (p: AddErrorPayload) => AddErrorPayload\n  validate: (v: void) => void\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  reset: (v: void) => void\n  set: (v: Value) => Value\n  resetErrors: (v: void) => void\n}\n\ntype ConnectedFields<Values extends AnyFormValues> = {\n  [K in keyof Values]: ConnectedField<Values[K]>\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const {\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        isTouched: touched,\n    } = useStore(field.$field)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: wrapEvent(field.onChange),\n        onBlur: wrapEvent(field.onBlur),\n        addError: wrapEvent(field.addError),\n        validate: wrapEvent(field.validate),\n        reset: wrapEvent(field.reset),\n        set: wrapEvent(field.onChange),\n        resetErrors: wrapEvent(field.resetErrors),\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Values extends AnyFormValues> = {\n  fields: ConnectedFields<Values>\n  values: Values\n  hasError: (fieldName?: keyof Values) => boolean\n  eachValid: boolean\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  errors: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>[]\n  )\n  error: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>\n  ) | null\n  errorText: (fieldName: keyof Values, map?: ErrorTextMap) => string\n  submit: (p: void) => void\n  reset: (p: void) => void\n  setForm: (p: Partial<Values>) => Partial<Values>\n  set: (p: Partial<Values>) => Partial<Values>\n  formValidated: (p: Values) => Values\n}\n\nexport function useForm<Values extends AnyFormValues>(\n    form: Form<Values>\n): Result<Values> {\n    const connectedFields = {} as AnyConnectedFields\n    const values = {} as AnyFormValues\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue\n        const field = form.fields[fieldName]\n        const connectedField = useField(field)\n        connectedFields[fieldName] = connectedField\n        values[fieldName] = connectedField.value\n    }\n\n    const {\n        isValid: eachValid,\n        isDirty,\n        touched,\n    } = useStore(form.$meta)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Values>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        errorText,\n        reset: wrapEvent(form.reset),\n        submit: wrapEvent(form.submit),\n        setForm: wrapEvent(form.setForm),\n        set: wrapEvent(form.setForm), // set form alias\n        formValidated: wrapEvent(form.formValidated),\n    } as Result<Values>\n}\n"],"names":["createCombineValidator","rulesOrResolver","value","form","rulesSources","errors","rules","i","length","rule","source","result","validator","push","name","errorText","isValid","eachValid","fields","firstErrors","fieldName","hasOwnProperty","$firstError","$firstErrors","combine","map","every","error","store","init","domain","existing","effectorData","createStore","event","createEvent","createFormUnit","createField","fieldConfig","initValue","$value","units","$errors","$isDirty","$touched","$isTouched","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$field","isDirty","isTouched","set","filter","bindValidation","$form","validateFormEvent","submitEvent","resetFormEvent","resetValues","field","resetErrorsFormEvent","formValidationEvents","fieldValidationEvents","eventsNames","validationEvents","includes","validationTrigger","sample","fieldValue","clock","merge","addErrorWithValue","fn","on","_","newError","bindChangeEvent","setForm","resetForm","resetTouched","guard","target","curr","updateSet","wrapEvent","useEvent","createFormValuesStore","shape","createForm","config","$filter","fieldsConfigs","validateOn","dirtyFlagsArr","touchedFlagsArr","_withFactory","sid","$eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","touched","submitForm","submit","formValidated","submitWithFormData","validateWithFormData","$values","useField","useStore","hasError","useForm","connectedFields","values","connectedField"],"mappings":"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"}