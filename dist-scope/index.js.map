{"version":3,"file":"index.js","sources":["../src/create-form-unit.ts","../src/field.ts","../src/validation.ts","../src/scope.ts","../src/factory.ts","../src/react-hooks.ts"],"sourcesContent":["import { createStore, createEvent, Domain, Store, Event } from \"effector\"\n\ntype CreateStoreParams<Value> = {\n  init: Value\n  domain?: Domain\n  existing?: Store<Value>\n}\n\nfunction store<Value>(\n    { init, domain, existing }: CreateStoreParams<Value>,\n    effectorData?: any\n) {\n    if (existing) {\n        return existing\n    }\n    return domain\n        ? domain.store(init, effectorData)\n        : createStore(init, effectorData)\n}\n\ntype CreateEventParams<Value> = {\n  domain?: Domain\n  existing?: Event<Value>\n}\n\nfunction event<Value>({ domain, existing }: CreateEventParams<Value>) {\n    if (existing) {\n        return existing\n    }\n    return domain ? domain.event<Value>() : createEvent<Value>()\n}\n\nexport const createFormUnit = {\n    store,\n    event,\n}\n","import {\n    createStore,\n    Domain,\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n    merge,\n} from \"effector\"\nimport {\n    ValidationError,\n    Field,\n    FieldData,\n    FieldConfig,\n    AnyFormValues,\n    ValidationEvent,\n    Rule,\n    RuleResolver,\n} from \"./types\"\nimport { createCombineValidator } from \"./validation\"\nimport { createFormUnit } from \"./create-form-unit\"\n\nexport function createField(\n    fieldName: string,\n    fieldConfig: FieldConfig<any>,\n    domain?: Domain,\n    effectorData?: any,\n): Field<any> {\n    const initValue = typeof fieldConfig.init === \"function\"\n        ? fieldConfig.init()\n        : fieldConfig.init\n\n    const $value = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$value,\n        init: initValue,\n    }, effectorData)\n\n    const $errors = createFormUnit.store<ValidationError[]>({\n        domain,\n        existing: fieldConfig.units?.$errors,\n        init: [],\n    }, effectorData)\n\n\n    const $firstError = $errors.map(\n        (errors) => errors[0] ? errors[0] : null\n    )\n\n    const $isDirty = $value.map((value) => value !== initValue)\n\n    const $touched = createFormUnit.store({\n        domain,\n        existing: fieldConfig.units?.$isTouched,\n        init: false,\n    }, effectorData)\n\n    const onChange = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onChange,\n    })\n    const onBlur = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.onBlur,\n    })\n    const changed = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.changed,\n    })\n    const addError = createFormUnit.event<{\n        rule: string\n        errorText?: string\n    }>({\n        domain,\n        existing: fieldConfig.units?.addError,\n    })\n    const validate = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.validate,\n    })\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetErrors,\n    })\n    const resetValue = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.resetValue,\n    })\n    const reset = createFormUnit.event({\n        domain,\n        existing: fieldConfig.units?.reset,\n    })\n\n    const $isValid = $firstError.map((firstError) => firstError === null)\n\n    const $field = combine({\n        value: $value,\n        errors: $errors,\n        firstError: $firstError,\n        isValid: $isValid,\n        isDirty: $isDirty,\n        isTouched: $touched,\n    })\n\n    return {\n        changed,\n        name: fieldName,\n        $value,\n        $errors,\n        $firstError,\n        $isValid,\n        $isDirty,\n        $isTouched: $touched,\n        $touched,\n        $field: $field as Store<FieldData<any>>,\n        onChange,\n        onBlur,\n        addError,\n        validate,\n        set: onChange,\n        reset,\n        resetErrors,\n        resetValue,\n        filter: fieldConfig.filter,\n    }\n}\n\ntype BindValidationParams = {\n    $form: Store<AnyFormValues>\n    validateFormEvent: Event<void>\n    submitEvent: Event<void>\n    resetFormEvent: Event<void>\n    resetValues: Event<void>\n    resetErrors: Event<void>\n    field: Field<any>\n    rules: Rule<any, any>[] | RuleResolver<any, any>\n    formValidationEvents: ValidationEvent[]\n    fieldValidationEvents: ValidationEvent[]\n}\n\nexport function bindValidation({\n    $form,\n    validateFormEvent,\n    submitEvent,\n    resetFormEvent,\n    resetValues,\n    field,\n    rules,\n    resetErrors: resetErrorsFormEvent,\n    formValidationEvents,\n    fieldValidationEvents,\n}: BindValidationParams,\neffectorData?: any): void {\n    const {\n        $value,\n        $errors,\n        onBlur,\n        changed,\n        addError,\n        validate,\n        resetErrors,\n        resetValue,\n        reset,\n    } = field\n\n    const rulesSources = typeof rules === \"function\"\n        ? createStore<any[]>([], effectorData)\n        : combine(\n            rules.map(({ source }) => source || createStore(null, effectorData))\n        )\n\n    const validator = createCombineValidator(rules)\n    const eventsNames = [...formValidationEvents, ...fieldValidationEvents]\n    const validationEvents: Event<{\n        fieldValue: any\n        form: AnyFormValues\n        rulesSources: any[]\n    }>[] = []\n\n    if (eventsNames.includes(\"submit\")) {\n        const validationTrigger = sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: submitEvent,\n        })\n\n        validationEvents.push(validationTrigger)\n    }\n\n    if (eventsNames.includes(\"blur\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: onBlur,\n        }))\n    }\n\n    if (eventsNames.includes(\"change\")) {\n        validationEvents.push(sample({\n            source: combine({\n                fieldValue: $value,\n                form: $form,\n                rulesSources,\n            }),\n            clock: merge(\n                [changed, resetValue, resetValues]\n            ),\n        }))\n    }\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validate,\n    }))\n\n    validationEvents.push(sample({\n        source: combine({\n            fieldValue: $value,\n            form: $form,\n            rulesSources,\n        }),\n        clock: validateFormEvent,\n    }))\n\n    const addErrorWithValue = sample({\n        source: $value,\n        clock: addError,\n        fn: (value, { rule, errorText }): ValidationError => ({\n            rule,\n            value,\n            errorText,\n        }),\n    })\n\n    $errors\n        .on(\n            validationEvents,\n            (_, { form, fieldValue, rulesSources }) => validator(\n                fieldValue,\n                form,\n                rulesSources,\n            )\n        )\n        .on(addErrorWithValue, (errors, newError) => [newError, ...errors])\n        .reset(resetErrors, resetFormEvent, reset, resetErrorsFormEvent)\n\n    if (!eventsNames.includes(\"change\")) {\n        $errors.reset(changed)\n    }\n}\n\nexport function bindChangeEvent(\n    {\n        $value,\n        $touched,\n        onChange,\n        changed,\n        name,\n        reset,\n        resetValue,\n        filter }: Field<any>,\n    setForm: Event<Partial<AnyFormValues>>,\n    resetForm: Event<void>,\n    resetTouched: Event<void>,\n    resetValues: Event<void>,\n): void {\n\n    $touched\n        .on(changed, () => true)\n        .reset(reset, resetForm, resetTouched)\n\n    guard({\n        source: onChange,\n        filter: filter || (() => true),\n        target: changed,\n    })\n\n    $value\n        .on(changed, (_, value) => value)\n        .on(\n            setForm,\n            (curr, updateSet) => updateSet.hasOwnProperty(name)\n                ? updateSet[name]\n                : curr\n        )\n        .reset(reset, resetValue, resetValues, resetForm)\n\n}\n","import { Store, combine } from \"effector\"\nimport {\n    ValidationError,\n    Rule,\n    AnyFields,\n    RuleResolver,\n} from \"./types\"\n\nexport function createCombineValidator<Value = any, Form = any>(\n    rulesOrResolver: Rule<Value, Form, any>[] | RuleResolver<Value, Form>\n) {\n    return (\n        value: Value,\n        form: Form,\n        rulesSources?: any[]\n    ): ValidationError<Value>[] => {\n\n        const errors: ValidationError<Value>[] = []\n        const rules = typeof rulesOrResolver === \"function\"\n            ? rulesOrResolver(value, form)\n            : rulesOrResolver\n\n        for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i]\n            const source = rulesSources ? rulesSources[i] : null\n            const result = rule.validator(value, form, source)\n\n            if (typeof result === \"boolean\" && !result) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: rule.errorText,\n                    value,\n                })\n            }\n\n            if (typeof result === \"object\" && !result.isValid) {\n                errors.push({\n                    rule: rule.name,\n                    errorText: result.errorText,\n                    value,\n                })\n            }\n        }\n\n        return errors\n    }\n}\n\n\nexport function eachValid(fields: AnyFields) {\n    const firstErrors: Store<ValidationError | null>[] = []\n  \n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        const { $firstError } = fields[fieldName]\n        firstErrors.push($firstError)\n    }\n  \n    const $firstErrors = combine(firstErrors)\n  \n    return $firstErrors.map((errors) => errors.every(error => error === null))\n}\n","import { Event } from \"effector\"\nimport { useEvent } from \"effector-react\"\n\nexport function isScope() {\n    return process.env.IS_SCOPE_BUILD === \"true\"\n}\n\nexport function isLegacySSRBuild() {\n    return process.env.IS_LEGACY_SSR_BUILD === \"true\"\n}\n\nexport function wrapEvent<P>(event: Event<P>) {\n    return isScope() ? useEvent(event) : event\n}\n\n\n","import {\n    Event,\n    Store,\n    combine,\n    sample,\n    guard,\n} from \"effector\"\nimport {\n    AnyFields,\n    AnyFormValues,\n    FormConfig,\n    Form,\n} from \"./types\"\nimport { eachValid } from \"./validation\"\nimport {\n    createField,\n    bindValidation,\n    bindChangeEvent,\n} from \"./field\"\nimport { createFormUnit } from \"./create-form-unit\"\nimport { isScope, isLegacySSRBuild } from \"./scope\"\n\nfunction createFormValuesStore(\n    fields: AnyFields\n): Store<AnyFormValues> {\n    const shape: { [key: string]: Store<any> } = {}\n\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n        shape[fieldName] = fields[fieldName].$value\n    }\n\n    return combine(shape)\n}\n\nexport function createForm<Values extends AnyFormValues>(\n    config: FormConfig<Values>\n) {\n    const {\n        filter: $filter,\n        domain,\n        fields: fieldsConfigs,\n        validateOn,\n        units,\n    } = config\n\n    if (isScope() && isLegacySSRBuild() && !domain) {\n        throw new Error(\"domain option is required in ssr mode!\")\n    }\n\n    const fields: AnyFields = {}\n\n    const dirtyFlagsArr: Store<boolean>[] = []\n    const touchedFlagsArr: Store<boolean>[] = []\n\n    // create units\n    for (const fieldName in fieldsConfigs) {\n        if (!fieldsConfigs.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n\n        const field = createField(fieldName, fieldConfig, domain, {\n            sid: fieldName\n        })\n\n        fields[fieldName] = field\n        dirtyFlagsArr.push(field.$isDirty)\n        touchedFlagsArr.push(field.$touched)\n    }\n\n    const $form = createFormValuesStore(fields)\n    const $eachValid = eachValid(fields)\n    const $isFormValid = $filter\n        ? combine($eachValid, $filter, (valid, filter) => valid && filter)\n        : $eachValid\n    const $isDirty = combine(dirtyFlagsArr).map(\n        (dirtyFlags) => dirtyFlags.some(Boolean)\n    )\n    const $touched = combine(touchedFlagsArr).map(\n        (touchedFlags) => touchedFlags.some(Boolean)\n    )\n\n    const $meta = combine({\n        isValid: $eachValid,\n        isDirty: $isDirty,\n        touched: $touched,\n    })\n\n    const validate = createFormUnit.event<void>({\n        domain,\n        existing: units?.validate,\n    })\n\n    const submitForm = createFormUnit.event<void>({\n        domain,\n        existing: units?.submit,\n    })\n\n    const formValidated = createFormUnit.event({\n        domain,\n        existing: units?.formValidated,\n    })\n\n\n    const setForm = createFormUnit.event<Partial<AnyFormValues>>({\n        domain,\n        existing: units?.setForm as Event<Partial<AnyFormValues>>,\n    })\n\n    const resetForm = createFormUnit.event({\n        domain,\n        existing: units?.reset,\n    })\n\n    const resetValues = createFormUnit.event({\n        domain,\n        existing: units?.resetValues,\n    })\n\n    const resetErrors = createFormUnit.event({\n        domain,\n        existing: units?.resetErrors,\n    })\n\n    const resetTouched = createFormUnit.event({\n        domain,\n        existing: units?.resetTouched,\n    })\n\n    const submitWithFormData = sample({\n        source: $form,\n        clock: submitForm,\n    })\n    const validateWithFormData = sample({\n        source: $form,\n        clock: validate\n    })\n\n    // bind units\n    for (const fieldName in fields) {\n        if (!fields.hasOwnProperty(fieldName)) continue\n\n        const fieldConfig = fieldsConfigs[fieldName]\n        const field = fields[fieldName]\n\n        bindChangeEvent(field, setForm, resetForm, resetTouched, resetValues)\n\n        if (!fieldConfig.rules) continue\n\n        bindValidation({\n            $form,\n            rules: fieldConfig.rules,\n            submitEvent: submitForm,\n            resetFormEvent: resetForm,\n            resetValues,\n            resetErrors,\n            validateFormEvent: validate,\n            field,\n            formValidationEvents: validateOn ? validateOn : [\"submit\"],\n            fieldValidationEvents: fieldConfig.validateOn\n                ? fieldConfig.validateOn\n                : [],\n        }, { sid: fieldName })\n    }\n\n    guard({\n        source: submitWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        // TODO: fix\n        target: formValidated,\n    })\n\n    guard({\n        source: validateWithFormData as unknown as Event<Values>,\n        filter: $isFormValid,\n        target: formValidated,\n    })\n\n    return {\n        fields,\n        $values: $form,\n        $eachValid,\n        $isValid: $eachValid,\n        $isDirty: $isDirty,\n        $touched: $touched,\n        $meta,\n        submit: submitForm,\n        validate,\n        resetTouched,\n        reset: resetForm,\n        resetValues,\n        resetErrors,\n        setForm,\n        set: setForm,\n        formValidated,\n    } as unknown as Form<Values>\n}\n","import { useStore } from \"effector-react\"\nimport {\n    Field,\n    ValidationError,\n    AnyFormValues,\n    Form\n} from \"./types\"\nimport { wrapEvent } from \"./scope\"\n\ntype ErrorTextMap = {\n  [key: string]: string\n}\n\ntype AddErrorPayload = { rule: string; errorText?: string }\n\ntype ConnectedField<Value> = {\n  name: string\n  value: Value\n  errors: ValidationError<Value>[]\n  firstError: ValidationError<Value> | null\n  hasError: () => boolean\n  onChange: (v: Value) => Value\n  onBlur: (v: void) => void\n  errorText: (map?: ErrorTextMap) => string\n  addError: (p: AddErrorPayload) => AddErrorPayload\n  validate: (v: void) => void\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  reset: (v: void) => void\n  set: (v: Value) => Value\n  resetErrors: (v: void) => void\n}\n\ntype ConnectedFields<Values extends AnyFormValues> = {\n  [K in keyof Values]: ConnectedField<Values[K]>\n}\n\ntype AnyConnectedFields = {\n  [key: string]: ConnectedField<any>\n}\n\nexport function useField<Value>(field: Field<Value>): ConnectedField<Value> {\n    const {\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        isTouched: touched,\n    } = useStore(field.$field)\n\n    return {\n        name: field.name,\n        value,\n        errors,\n        firstError,\n        isValid,\n        isDirty,\n        touched,\n        isTouched: touched,\n        onChange: wrapEvent(field.onChange),\n        onBlur: wrapEvent(field.onBlur),\n        addError: wrapEvent(field.addError),\n        validate: wrapEvent(field.validate),\n        reset: wrapEvent(field.reset),\n        set: wrapEvent(field.onChange),\n        resetErrors: wrapEvent(field.resetErrors),\n        hasError: () => {\n            return firstError !== null\n        },\n        errorText: (map) => {\n            if (!firstError) {\n                return \"\"\n            }\n            if (!map) {\n                return firstError.errorText || \"\"\n            }\n            if (map[firstError.rule]) {\n                return map[firstError.rule]\n            }\n            return firstError.errorText || \"\"\n        }\n    }\n\n}\n\ntype Result<Values extends AnyFormValues> = {\n  fields: ConnectedFields<Values>\n  values: Values\n  hasError: (fieldName?: keyof Values) => boolean\n  eachValid: boolean\n  isValid: boolean\n  isDirty: boolean\n  isTouched: boolean\n  touched: boolean\n  errors: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>[]\n  )\n  error: (fieldName: keyof Values) => (\n    ValidationError<Values[typeof fieldName]>\n  ) | null\n  errorText: (fieldName: keyof Values, map?: ErrorTextMap) => string\n  submit: (p: void) => void\n  reset: (p: void) => void\n  setForm: (p: Partial<Values>) => Partial<Values>\n  set: (p: Partial<Values>) => Partial<Values>\n  formValidated: (p: Values) => Values\n}\n\nexport function useForm<Values extends AnyFormValues>(\n    form: Form<Values>\n): Result<Values> {\n    const connectedFields = {} as AnyConnectedFields\n    const values = {} as AnyFormValues\n\n    for (const fieldName in form.fields) {\n        if (!form.fields.hasOwnProperty(fieldName)) continue\n        const field = form.fields[fieldName]\n        const connectedField = useField(field)\n        connectedFields[fieldName] = connectedField\n        values[fieldName] = connectedField.value\n    }\n\n    const {\n        isValid: eachValid,\n        isDirty,\n        touched,\n    } = useStore(form.$meta)\n\n\n    const hasError = (fieldName?: string): boolean => {\n        if (!fieldName) {\n            return !eachValid\n        }\n        if (connectedFields[fieldName]) {\n            return Boolean(connectedFields[fieldName].firstError)\n        }\n        return false\n    }\n\n    const error = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].firstError\n        }\n        return null\n    }\n\n    const errors = (fieldName: string) => {\n        if (connectedFields[fieldName]) {\n            return connectedFields[fieldName].errors\n        }\n        return []\n    }\n\n    const errorText = (fieldName: string, map?: ErrorTextMap) => {\n        const field = connectedFields[fieldName]\n        if (!field) {\n            return \"\"\n        }\n        if (!field.firstError) {\n            return \"\"\n        }\n        if (!map) {\n            return field.firstError.errorText || \"\"\n        }\n        if (map[field.firstError.rule]) {\n            return map[field.firstError.rule]\n        }\n        return field.firstError.errorText || \"\"\n    }\n\n    return {\n        fields: connectedFields as ConnectedFields<Values>,\n        values,\n        hasError,\n        eachValid,\n        isValid: eachValid,\n        isDirty,\n        isTouched: touched,\n        touched,\n        errors,\n        error,\n        errorText,\n        reset: wrapEvent(form.reset),\n        submit: wrapEvent(form.submit),\n        setForm: wrapEvent(form.setForm),\n        set: wrapEvent(form.setForm), // set form alias\n        formValidated: wrapEvent(form.formValidated),\n    } as Result<Values>\n}\n"],"names":["createFormUnit","store","init","domain","existing","effectorData","and","sid","createStore","event","createEvent","createField","fieldName","fieldConfig","_fieldConfig$units","_fieldConfig$units2","_fieldConfig$units3","_fieldConfig$units4","_fieldConfig$units5","_fieldConfig$units6","_fieldConfig$units7","_fieldConfig$units8","_fieldConfig$units9","_fieldConfig$units10","_fieldConfig$units11","initValue","$value","units","name","$errors","$firstError","map","errors","$isDirty","value","$touched","$isTouched","onChange","onBlur","changed","addError","validate","resetErrors","resetValue","reset","$isValid","firstError","$field","combine","isValid","isDirty","isTouched","or","set","filter","bindValidation","$form","validateFormEvent","submitEvent","resetFormEvent","resetValues","field","rules","resetErrorsFormEvent","formValidationEvents","fieldValidationEvents","rulesSources","source","validator","rulesOrResolver","form","i","length","rule","result","push","errorText","eventsNames","validationEvents","includes","validationTrigger","sample","fieldValue","clock","merge","addErrorWithValue","fn","on","_","newError","bindChangeEvent","setForm","resetForm","resetTouched","guard","target","curr","updateSet","hasOwnProperty","wrapEvent","useEvent","createForm","config","$filter","fields","fieldsConfigs","validateOn","dirtyFlagsArr","touchedFlagsArr","_withFactory","method","shape","createFormValuesStore","$eachValid","firstErrors","every","error","eachValid","$isFormValid","valid","dirtyFlags","some","Boolean","touchedFlags","$meta","touched","submitForm","submit","formValidated","submitWithFormData","validateWithFormData","$values","useField","useStore","hasError","useForm","connectedFields","values","connectedField"],"mappings":"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"}